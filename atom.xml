<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shinhwa&#39;s Site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T02:33:14.642Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shinhwa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 206. Reverse Linked List</title>
    <link href="http://yoursite.com/2019/02/26/leetcode-206-reverse-linked-list/"/>
    <id>http://yoursite.com/2019/02/26/leetcode-206-reverse-linked-list/</id>
    <published>2019-02-26T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:14.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>单链表反转</p><p>题目来源：<a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-linked-list/</a></p><p>标记难度：Easy<br><a id="more"></a></p><p>提交次数：1/?</p><p>代码效率：100%</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>迭代法：将当前节点的后继节点指向前一个节点，移动当前节点</p><p>递归法</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>迭代法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode next = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Nonesense"><a href="#Nonesense" class="headerlink" title="Nonesense"></a>Nonesense</h3><p>最简单的单链表居然花费了我半天的时间，最后还是参考别人的答案才写出来。。。智商捉急</p><p>总结一下问题：</p><ul><li>太急躁，要静下心来慢慢梳理过程，整理成代码输出</li><li><strong>java变量指针等概念感觉还是不清晰</strong>，今天抽空需要补一下</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;单链表反转&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/reverse-linked-list/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 448 Find All Numbers Disappeared in an Array</title>
    <link href="http://yoursite.com/2019/02/24/leetcode-448-find-all-numbers-disappeared-in-an-array/"/>
    <id>http://yoursite.com/2019/02/24/leetcode-448-find-all-numbers-disappeared-in-an-array/</id>
    <published>2019-02-24T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:03.265Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为N整形数组，元素取值 范围从1到N，其中有可能有重复出现两次的元素，找出丢失的元素：</p><p>题目来源：<a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/</a></p><p>标记难度：Easy<br><a id="more"></a><br>提交次数：1/N</p><p>代码效率： 95.58%</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>取负法：不管一个元素出现一次还是两次，只要出现它对应的位置就会被取负。当某个元素不出现的时候，该元素对应的位置始终访问不到，所以还是正值，通过这种方法我们就可以找到哪些元素没有出现</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> val = Math.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[val] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            nums[val] = -nums[val];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                list.add(j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>感觉这个题就是单纯考虑数学技巧，做起来比较吃力，看答案的时候豁然开朗，还是慢慢积累吧。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个长度为N整形数组，元素取值 范围从1到N，其中有可能有重复出现两次的元素，找出丢失的元素：&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 283 Move Zeroes</title>
    <link href="http://yoursite.com/2019/02/23/leetcode-283-move-zeroes/"/>
    <id>http://yoursite.com/2019/02/23/leetcode-283-move-zeroes/</id>
    <published>2019-02-23T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:38.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个整形数组，将0都移动到最后，保持其他数组相对位置不变</p><p>题目来源：<a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="noopener">https://leetcode.com/problems/move-zeroes/</a></p><p>标记难度：Easy<br><a id="more"></a></p><p>提交次数：1/N</p><p>代码效率：100%</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一个快指针，一个慢指针，快指针指向不为0的元素，快慢指针值交换，同时向后移动一位。这样可以保证下面两个条件：</p><ul><li>快慢指针之间的元素都是0</li><li>慢指针之前的元素都不为0</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                tmp = nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = tmp;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>一开始理解错误，以为把0都放到后面之后还是要对前面从大到小进行排序。。。结果想了半天</p><p>以后还是要仔细审题，不要怀疑自己，先用自己的想法暴力实现</p><p>写代码之前可以举个栗子来一步一步推敲，想好边界和规律再写代码</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个整形数组，将0都移动到最后，保持其他数组相对位置不变&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/move-zeroes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/move-zeroes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 136. Single Number</title>
    <link href="http://yoursite.com/2019/02/22/leetcode-136-single-number/"/>
    <id>http://yoursite.com/2019/02/22/leetcode-136-single-number/</id>
    <published>2019-02-22T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:21.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个非空数组，除了唯一个单独的元素外，每个元素出现两次。找出这个单独的元素。</p><p>题目来源：<a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">https://leetcode.com/problems/single-number/</a></p><p>标记难度：Easy<br><a id="more"></a></p><p>提交次数：1/N</p><p>代码效率：100.00%</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用异或 <code>^</code></p><ul><li>两个相同的数异或后为0</li><li>0和一个数异或后为那个数</li><li>异或运算满足交换律</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; nums.length;i++)&#123;</span><br><span class="line">            result^=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个非空数组，除了唯一个单独的元素外，每个元素出现两次。找出这个单独的元素。&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/single-number/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 226. Invert Binary Tree</title>
    <link href="http://yoursite.com/2019/02/21/leetcode-226-invert-binary-tree/"/>
    <id>http://yoursite.com/2019/02/21/leetcode-226-invert-binary-tree/</id>
    <published>2019-02-21T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:11.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>反转二叉树左右子树</p><p>题目来源：<a href="https://leetcode.com/problems/invert-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/invert-binary-tree/</a></p><p>标记难度：Easy<br><a id="more"></a><br>提交次数：1/ N</p><p>代码效率：100.00%</p><p>Input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>左子树和右子树递归互换</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode tmp = root.left;</span><br><span class="line">        root.left = invertTree(root.right);</span><br><span class="line">        root.right = invertTree(tmp);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>对递归还是理解不透彻，总结一下如何处理递归问题：</p><blockquote><p>那该如何理解递归代码呢？如果一个问题A可以分解为若干个子问题B、C、D，你可以假设子问题B、C、D已经解决。而且，你只需要思考问题A与子问题B、C、D两层之间的关系即可，不需要一层层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;反转二叉树左右子树&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/invert-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/invert-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 104. Maximum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2019/02/20/leetcode-104-maximum-depth-of-binary-tree/"/>
    <id>http://yoursite.com/2019/02/20/leetcode-104-maximum-depth-of-binary-tree/</id>
    <published>2019-02-20T13:44:24.000Z</published>
    <updated>2019-03-27T02:35:02.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>计算二叉树的深度</p><p>题目来源：<a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-depth-of-binary-tree/</a></p><p>标记难度：Easy<br><a id="more"></a><br>提交次数：思路很乱，参考 Discuss 的答案</p><p>代码效率：100.00%</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>递归左右子树，对深度最大的子树进行递归调用并+1</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;计算二叉树的深度&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/maximum-depth-of-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 617 Merge Two Binary Trees</title>
    <link href="http://yoursite.com/2019/02/19/leetcode-617-merge-two-binary-trees/"/>
    <id>http://yoursite.com/2019/02/19/leetcode-617-merge-two-binary-trees/</id>
    <published>2019-02-19T13:44:24.000Z</published>
    <updated>2019-03-27T02:38:36.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>合并两个给定的子二叉树，新的二叉树每个节点是两个二叉树对应节点的和，如果某一个二叉树的节点不存在，则取另外一个二叉树对应节点的值作为新的二叉树对应节点的值。</p><p>题目来源：<a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">https://leetcode.com/problems/merge-two-binary-trees/</a></p><p>标记难度：Easy<br><a id="more"></a><br>提交次数：1/1</p><p>代码效率：98.24%</p><p>耗时：25分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">Output: </span><br><span class="line">Merged tree:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \   \ </span><br><span class="line"> 5   4   7</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>主要考察对递归算法的理解。</p><ul><li>首先考虑边界，如果两个子二叉树都为空，则新的二叉树必定为空</li><li>考虑其中一个子二叉树为空，则新的二叉树直接等于另外一个子二叉树</li><li>如果两个子二叉树都不为空，新二叉树节点值为两个子二叉树对应节点的值的和，同时对两个子二叉树的左右子树进行递归调用，仔细想想就明白了</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        TreeNode ret;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t1 != <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ret = t1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t1 == <span class="keyword">null</span> &amp;&amp; t2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ret = t2;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ret = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">            ret.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">            ret.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然别人思路的总是最好的 o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="keyword">null</span>) <span class="keyword">return</span> t2;</span><br><span class="line">    <span class="keyword">if</span> (t2 == <span class="keyword">null</span>) <span class="keyword">return</span> t1;</span><br><span class="line">    TreeNode result = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">    result.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">    result.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>学习数据结构的时候，总感觉递归对自己来说是弱项，智商不够用。今天居然一次性直接做出来了。学习数据结构和算法真的能培养思维逻辑和解决问题的能力。fighting !!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;合并两个给定的子二叉树，新的二叉树每个节点是两个二叉树对应节点的和，如果某一个二叉树的节点不存在，则取另外一个二叉树对应节点的值作为新的二叉树对应节点的值。&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/merge-two-binary-trees/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/merge-two-binary-trees/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 461 Hamming Distance</title>
    <link href="http://yoursite.com/2019/02/18/leetcode-461-hamming-distance/"/>
    <id>http://yoursite.com/2019/02/18/leetcode-461-hamming-distance/</id>
    <published>2019-02-18T13:44:24.000Z</published>
    <updated>2019-03-27T02:33:58.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>统计两个整数转换成二进制位时位数不同的个数。</p><p>题目来源：<a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">https://leetcode.com/problems/hamming-distance/</a></p><p>标记难度：Easy<br><a id="more"></a><br>提交次数：1/2 (少写了 return 语句。。)</p><p>代码效率：91.77%</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>二进制的每一位的值不是 0 就是 1，就是整数除以 2 取余的结果，判断是否相等。然后再取模（相当于向左移动一位），再取余作比较。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span> || y != <span class="number">0</span>)&#123;</span><br><span class="line">            i = x % <span class="number">2</span>;</span><br><span class="line">            j = y % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x / <span class="number">2</span>;</span><br><span class="line">            y = y / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>别人的一行代码实现Orz：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(x ^ y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;统计两个整数转换成二进制位时位数不同的个数。&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/hamming-distance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/hamming-distance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 771 Jewels And Stones</title>
    <link href="http://yoursite.com/2019/02/17/leetcode-771-jewels-and-stones/"/>
    <id>http://yoursite.com/2019/02/17/leetcode-771-jewels-and-stones/</id>
    <published>2019-02-17T13:44:24.000Z</published>
    <updated>2019-03-27T02:34:44.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定两个字符串 J 和 S，找出 J 中的字母出现在 S 中的次数。</p><p>题目来源：<a href="https://leetcode.com/problems/jewels-and-stones/" target="_blank" rel="noopener">https://leetcode.com/problems/jewels-and-stones/</a></p><p>标记难度：Easy<br><a id="more"></a></p><p>提交次数：1/4</p><p>代码效率：93.10%</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>把 J 和S 转换成字符数组，遍历 J 数组中的字符是否等于 S 中的 字符。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] charJ = J.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] charS = S.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> <span class="keyword">var</span> : charJ)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;charS.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">var</span> == charS[i])&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>别人还有更好的做法：</p><ul><li>遍历 J 把字符放入 set 集合</li><li>遍历 S 字符是否出现在 set 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        Set setJ = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> j: J.toCharArray()) setJ.add(j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> s: S.toCharArray()) <span class="keyword">if</span> (setJ.contains(s)) res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>第一次开始刷 Leetcode ,虽然做的是 easy 的题目，但还是没有参考其他人的答案自己完成了。开始有一点新鲜感和成就感了，希望可以坚持下去。</p><p>刚开始刷题使用的是 VS CODE 码代码，在网上看了一些网友的建议，为了应对后续面试可能要求手写编程的情况，所以现在是先用 IDE 把代码写出来，再手写输入 Leetcode 提交答案。</p><p>加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定两个字符串 J 和 S，找出 J 中的字母出现在 S 中的次数。&lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://leetcode.com/problems/jewels-and-stones/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/jewels-and-stones/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记难度：Easy&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Tips</title>
    <link href="http://yoursite.com/2019/02/15/Leetcode-tips/"/>
    <id>http://yoursite.com/2019/02/15/Leetcode-tips/</id>
    <published>2019-02-15T13:44:24.000Z</published>
    <updated>2019-03-26T14:25:07.820Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构和算法是编程中很重要的一部分，学习了这些知识之后，对解题思路有很大的帮助。</p><p>数据结构和算法也是其他技术的实现基础，要理解这些技术的实现原理就必须学习数据结构和算法。推荐学习书籍：<br><a id="more"></a></p><ul><li><p>数据结构与算法之美</p><p>极客时间的一个专栏，内容通俗易懂，适合入门</p></li><li><p>数据结构与算法分析：Java语言描述</p><p>下一步打算看的书籍</p></li><li><p>经典大作：算法，算法导论</p></li></ul><p>附数据结构与算法之美推荐书单：<br><img src="https://shinhwa-1258620884.cos.ap-beijing.myqcloud.com/image/1550407333793.png" alt></p><h3 id="Leetcode-刷题方法"><a href="#Leetcode-刷题方法" class="headerlink" title="Leetcode 刷题方法"></a>Leetcode 刷题方法</h3><p>在刚开始刷 Leetcode 时，很多人只有在看完答案才知道要怎么做，如果不看答案的话完全没有思路。这是非常正常的现象，并不表示你的思维能力比别人差。人类最擅长的学习方式是模仿，刚开始刷题的时候不会做看看别人怎么做是很正确的做法，模仿多了自然就会做了。</p><p>刷 Leetcode 也有两种流派：龟派和兔派。龟派每道题都要想很久，而且尽可能想出多种解法。兔派是想一会儿就看答案，这样就可以很快地刷题。龟派比较适合思维锻炼，而兔派比较适合短期内快速提高并记忆。如果是为了应对校招的话，比较推荐兔派这种刷题方法，因为校招确实很依赖于短期记忆。选择兔派这种方式的话，就需要反复地进行复习，从而保持记忆并增加理解。但是也不能完全采用兔派这种方法，因为如果习惯于不去思考怎么做的话，会养成惰性的思维方式。</p><p>当你刷题到一定程度的时候，最好每天再刷一两题保持题感。可以选你之前做过的题目，因为你再做一遍的话可以很快做出来，这样子就可以让你对刷题这件事保持积极的一种心态。</p><p>刷 Leetcode 的收益如下图所示，可以看到刷的越多收益增长的越小。刷 200 题就足够应对大多数互联网公司的校招，但是如果时间不够的话刷 100 题也是有很大的收益，可以刷一下 <a href="https://leetcode.com/problemset/top-100-liked-questions/" target="_blank" rel="noopener">Top 100 Liked Questions</a>。</p><p><img src="https://shinhwa-1258620884.cos.ap-beijing.myqcloud.com/image/1550407398105.png" alt></p><ul><li>排序：大部分要求能手写，并分析时间空间复杂度，以及稳定性</li><li>树：红黑树的原理以及在 JDK 的使用；B+ 树以及在数据库索引中的使用</li><li>图：拓扑排序；并查集；最短路径；最小生成树</li><li>散列表：实现原理，以及在 JDK 中的使用</li><li>字符串：KMP；AC 自动机；Trie 树</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构和算法是编程中很重要的一部分，学习了这些知识之后，对解题思路有很大的帮助。&lt;/p&gt;
&lt;p&gt;数据结构和算法也是其他技术的实现基础，要理解这些技术的实现原理就必须学习数据结构和算法。推荐学习书籍：&lt;br&gt;
    
    </summary>
    
      <category term="Alogorithms" scheme="http://yoursite.com/categories/Alogorithms/"/>
    
    
      <category term="Alogorithms" scheme="http://yoursite.com/tags/Alogorithms/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 8 - 页面置换算法</title>
    <link href="http://yoursite.com/2018/12/29/os-lecture-8-summary/"/>
    <id>http://yoursite.com/2018/12/29/os-lecture-8-summary/</id>
    <published>2018-12-28T16:03:51.000Z</published>
    <updated>2019-03-26T09:51:53.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>功能</strong>：当出现缺页异常，需调入新页面而内存已满时，置换算法选择被置换的物理页面</p><p><strong>目标</strong></p><ul><li>尽可能减少页面的调入调出次数</li><li>把未来不再访问或短期内不访问的页面调出<a id="more"></a></li></ul><h3 id="最优页面置换算法-OPT-optimal"><a href="#最优页面置换算法-OPT-optimal" class="headerlink" title="最优页面置换算法 ( OPT , optimal )"></a>最优页面置换算法 ( OPT , optimal )</h3><p>置换在未来最长时间不访问的页面，理想情况</p><h3 id="先进先出算法（First-In-First-Out-FIFO）"><a href="#先进先出算法（First-In-First-Out-FIFO）" class="headerlink" title="先进先出算法（First-In First-Out, FIFO）"></a>先进先出算法（First-In First-Out, FIFO）</h3><p><strong>基本思路：</strong>选择在内存驻留时间最长的页面进行置换</p><p><strong>算法实现</strong></p><ul><li>维护一个记录所有位于内存中的逻辑页面链表</li><li>链表元素按驻留内存的时间排序，链首最长，链尾最短</li><li>出现缺页时，选择链首页面进行置换，新页面加到链尾</li></ul><p><strong>算法特征</strong></p><ul><li>实现简单</li><li>性能较差，调出的页面可能是经常访问的</li><li>进程分配物理页面数增加时，缺页并不一定减少( Belady 现象)</li><li>很少单独使用</li></ul><h3 id="最近最久未使用算法-Least-Recently-Used-LRU"><a href="#最近最久未使用算法-Least-Recently-Used-LRU" class="headerlink" title="最近最久未使用算法(Least Recently Used, LRU)"></a>最近最久未使用算法(Least Recently Used, LRU)</h3><p><strong>基本思路</strong></p><ul><li>选择最长时间没有被引用的页面进行置换</li><li>如某些页面长时间未被访问，则它们在将来还可能会长时间不会访问</li></ul><p><strong>算法实现</strong></p><ul><li>缺页时，计算内存中每个逻辑页面的上一次访问时间</li><li>选择上一次使用到当前时间最长的页面</li></ul><p><strong>算法特征</strong></p><p>最优置换算法的一种近似</p><p><strong>LRU算法的可能实现方法</strong></p><ul><li>页面链表<ul><li>系统维护一个按最近一次访问时间<strong>排序</strong>的页面链表</li><li>链表首节点是最近刚刚使用过的页面</li><li>链表尾节点是最久未使用的页面</li><li>访问内存时，找到相应页面，并把它移到链表之首</li><li>缺页时，置换链表尾节点的页面</li></ul></li><li>活动页面栈<ul><li>访问页面时，将此页号压入栈顶，并栈内相同的页号抽出</li><li>缺页时，置换栈底的页面</li></ul></li></ul><p><strong>特征</strong></p><p>开销比较大</p><h3 id="时钟置换算法（Clock）"><a href="#时钟置换算法（Clock）" class="headerlink" title="时钟置换算法（Clock）"></a><strong>时钟置换算法（Clock）</strong></h3><p><strong>基本思路</strong></p><p>仅对页面的访问情况进行大致统计</p><p>时钟算法是LRU和FIFO的折中</p><h3 id="最不常用算法（Least-Frequently-Used-LFU）"><a href="#最不常用算法（Least-Frequently-Used-LFU）" class="headerlink" title="最不常用算法（Least Frequently Used, LFU）"></a><strong>最不常用算法（Least Frequently Used, LFU）</strong></h3><p><strong>基本思路</strong></p><p>缺页时，置换访问次数最少的页面</p><p><strong>算法实现</strong></p><ul><li>每个页面设置一个访问计数（多位计数）</li><li>访问页面时，访问计数加1</li><li>缺页时，置换计数最小的页面</li></ul><p><strong>算法特征</strong></p><ul><li>算法开销大</li><li>开始时频繁使用，但以后不使用的页面很难置换</li></ul><p><strong>解决方法</strong></p><p>计数定期右移、衰减</p><h3 id="LRU和LFU的区别"><a href="#LRU和LFU的区别" class="headerlink" title="LRU和LFU的区别"></a><strong>LRU和LFU的区别</strong></h3><ul><li>LRU关注多久未访问,时间越短越好</li><li>LFU关注访问次数，次数越多越好</li></ul><h3 id="LRU、FIFO和Clock的比较"><a href="#LRU、FIFO和Clock的比较" class="headerlink" title="LRU、FIFO和Clock的比较"></a><strong>LRU、FIFO和Clock的比较</strong></h3><ul><li><p>LRU算法和FIFO本质上都是先进先出的思路</p><ul><li>LRU依据页面的最近访问时间排序</li><li>LRU需要动态地调整顺序</li><li>FIFO依据页面进入内存的时间排序</li></ul></li><li><p>LRU可退化成FIFO</p><p>如页面进入内存后没有被访问，最近访问时间与进入内存的时间相同</p></li><li><p>LRU算法性能较好，但系统开销较大</p></li><li><p>FIFO算法系统开销较小，会发生Belady现象</p></li><li><p>Clock算法是它们的折衷</p><ul><li>页面访问时，不动态调整页面在链表中的顺序，仅做标记</li><li>缺页时，再把它移动到链表末尾</li></ul></li><li><p>对于未被访问的页面，Clock和LRU算法的表现一样好</p></li><li><p>对于被访问过的页面，Clock算法不能记录准确访问顺序，而LRU算法可以</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：当出现缺页异常，需调入新页面而内存已满时，置换算法选择被置换的物理页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽可能减少页面的调入调出次数&lt;/li&gt;
&lt;li&gt;把未来不再访问或短期内不访问的页面调出
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 7 - 虚拟内存</title>
    <link href="http://yoursite.com/2018/12/23/os-lecture-7-summary/"/>
    <id>http://yoursite.com/2018/12/23/os-lecture-7-summary/</id>
    <published>2018-12-22T16:03:51.000Z</published>
    <updated>2019-03-26T09:50:22.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>虚拟内存是非连续内存分配的一个延续，非连续内存分配在存储空间内可以连续也可以不连续。虚拟内存是在非连续内存分配基础上，可以把一部分内容放到外存中去，让应用程序有更大的空间使用。</p><p><strong>需求背景</strong>：增长迅速的存储需求，程序规模的增长速度远远大于存储器容量的增长速度。<br><a id="more"></a></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul><li><p>覆盖 ( overlay )</p><p>应用程序手动把需要的指令和数据保存在内存中</p></li><li><p>交换 ( swapping )</p><p>操作系统自动把暂时不能执行的程序保存到外存中</p></li><li><p>虚拟存储</p><p>在有限容量的内存中，以页为单位自动装入更多更大的程序</p></li></ul><h3 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h3><p><strong>目标</strong> ：在较小的可用内存中运行较大的程序</p><p><strong>方法</strong> ：依据程序逻辑结构，将程序划分为若干功能相对独立的模块，将不会同时执行的模块共享同一块内存区域</p><ul><li>必要部分（常用功能）的代码和数据常驻内存</li><li>可选部分（不常用功能）放在其他程序模块中,只在需要用到时装入内存</li><li>不存在调用关系的模块可相互覆盖，共用同一块内存区域</li></ul><p>注：不存在相互调用关系可以分成一个覆盖区</p><p><strong>不足</strong> ：</p><ul><li>增加编程困难<ul><li>需程序员划分功能模块，并确定模块间的覆盖关系</li><li>增加了编程的复杂度</li></ul></li><li>增加执行时间<ul><li>从外存装入覆盖模块</li><li>时间换空间</li></ul></li></ul><h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><p><strong>目标：</strong>增加正在运行或需要运行的程序的内存</p><p><strong>实现方法：</strong></p><ul><li>可将暂时不能运行的程序放到外存</li><li>换入换出的基本单位是整个进程的地址空间</li><li>换出（swap out）：把一个进程的整个地址空间保存到外存；</li><li>换入（swap in）：将外存中某进程的地址空间读入到内存；</li></ul><p><strong>交换技术面临的问题</strong></p><ul><li><p>交换时机</p><p>只当内存空间不够或有不够的可能时换出</p></li><li><p>交换区大小</p><p>存放所有用户进程的所有内存映像的拷贝</p></li><li><p>程序换入时的重定位</p><p>采用动态地址映射的方法</p></li></ul><h3 id="覆盖和交换的对比"><a href="#覆盖和交换的对比" class="headerlink" title="覆盖和交换的对比"></a>覆盖和交换的对比</h3><ul><li>覆盖<ul><li>只能发生在没有调用关系的模块间</li><li>程序员须给出模块间的逻辑覆盖结构</li><li>发生在运行程序的内部模块间</li></ul></li><li>交换<ul><li>以进程为单位</li><li>以进程为单位</li><li>发生在内存进程间</li></ul></li></ul><h3 id="虚拟内存技术目标"><a href="#虚拟内存技术目标" class="headerlink" title="虚拟内存技术目标"></a>虚拟内存技术目标</h3><ul><li><p>只把部分程序放到内存中，从而运行比物理内存大的程序</p><p>由操作系统自动完成，无需程序员的干涉</p></li><li><p>实现进程在内存与外存之间的交换，从而获得更多的空闲内存空间</p><p>在内存和外存之间只交换进程的部分内容</p></li></ul><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><p>程序在执行过程中的一个较短时期，所执行的指令地址和指令的操作数地址，分别局限于一定区域</p><ul><li><p>时间局部性</p><p>一条指令的一次执行和下次执行，一个数据的一次访问和下次访问都集中在一个较短时期内</p></li><li><p>空间局部性</p><p>当前指令和邻近的几条指令，当前访问的数据和邻近的几个数据都集中在一个较小区域内</p></li><li><p>分支局部性</p><p>一条跳转指令的两次执行，很可能跳到相同的内存位置</p></li></ul><p><strong>局部性原理的意义</strong><br>从理论上来说，虚拟存储技术是能够实现的，而且可取得满意的效果</p><h3 id="虚拟存储概念"><a href="#虚拟存储概念" class="headerlink" title="虚拟存储概念"></a><strong>虚拟存储概念</strong></h3><p>将不常用的部分内存块暂存到外存</p><p><strong>原理</strong></p><ul><li>装载程序时只将当前指令执行需要的部分页面或段装入内存</li><li>指令执行中需要的指令或数据不在内存（称为缺页或缺段）时，处理器通知操作系统将相应的页面或段调入内存</li><li>操作系统将内存中暂时不用的页面或段保存到外存</li></ul><p><strong>实现方式</strong></p><ul><li>虚拟页式存储<ul><li>在页式存储管理的基础上，增加请求调页和页面置换</li><li>当用户程序要装载到内存运行时，只装入部分页面，就启动程序运行</li><li>进程在运行中发现有需要的代码或数据不在内存时，则向系统发出缺页异常请求</li><li>操作系统在处理缺页异常时，将外存中相应的页面调入内存，使得进程能继续运行</li></ul></li><li>虚拟段式存储</li></ul><h3 id="缺页异常"><a href="#缺页异常" class="headerlink" title="缺页异常"></a>缺页异常</h3><ol><li>在内存中有空闲物理页面时，分配一物理页帧 f，转第 5 步</li><li>依据页面置换算法选择将被替换的物理页帧 f，对应逻辑页 q</li><li>如 q 被修改过，则把它写回外存</li><li>修改 q 的页表项中驻留位置为0</li><li>将需要访问的页 p 装入到物理页面 f </li><li>修改p的页表项驻留位为 1 ,物理页帧号为 f </li><li>重新执行产生缺页的指令</li></ol><h3 id="虚拟页式存储中的外存管理"><a href="#虚拟页式存储中的外存管理" class="headerlink" title="虚拟页式存储中的外存管理"></a><strong>虚拟页式存储中的外存管理</strong></h3><p><strong>在何处保存未被映射的页</strong></p><ul><li><p>应能方便地找到在外存中的页面内容</p></li><li><p>交换空间（磁盘或者文件）</p><p>采用特殊格式存储未被映射的页面</p></li></ul><p>注：可以用一个文件来存这些未被映射的页</p><p><strong>虚拟页式存储中的外存选择</strong></p><ul><li>代码段：可执行二进制文件（代码指向相应的可执行文件）</li><li>动态加载的共享库程序段：动态调用的库文件（共享库也有相应的目标文件，所以上两项不改）</li><li>其它段：交换空间（数据段，堆栈）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;虚拟内存是非连续内存分配的一个延续，非连续内存分配在存储空间内可以连续也可以不连续。虚拟内存是在非连续内存分配基础上，可以把一部分内容放到外存中去，让应用程序有更大的空间使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求背景&lt;/strong&gt;：增长迅速的存储需求，程序规模的增长速度远远大于存储器容量的增长速度。&lt;br&gt;
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 6 - 物理内存管理:非连续内存分配</title>
    <link href="http://yoursite.com/2018/12/18/os-lecture-6-summary/"/>
    <id>http://yoursite.com/2018/12/18/os-lecture-6-summary/</id>
    <published>2018-12-17T16:03:51.000Z</published>
    <updated>2019-03-26T09:54:30.449Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><ul><li>背景</li><li>段机制</li><li>页机制<ul><li>普通页表</li><li>快表</li><li>多级页表</li><li>页寄存器</li><li>反置页表</li></ul></li><li>段页式存储管理<a id="more"></a><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4></li></ul><p><strong>非连续内存分配的需求背景</strong></p><p>必须分配连续的会带来很多麻烦</p><p>不连续？找到的几率更高，但会带来新问题。比如基本块有多大。</p><p>段式：分块大</p><p>页式：分块小</p><p><strong>设计目标</strong></p><p>连续分配的缺点：</p><ul><li>物理内存必须连续</li><li>存在外碎片和内碎片</li><li>内存分配的动态修改困难</li><li>内存利用率较低</li></ul><p>非连续分配的设计目标：</p><ul><li>提高内存利用效率和管理灵活性</li><li>允许一个程序使用非连续的物理地址空间</li><li>允许共享代码与数据</li><li>支持动态加载和动态链接</li></ul><p><strong>实现</strong></p><p>非连续分配需要解决的问题：</p><ul><li>如何实现虚拟地址和物理地址的转换：不同的逻辑地址可能位于不连续的物理区域中<ul><li>软件实现（灵活，开销大）</li><li>硬件实现（够用，开销小)</li></ul></li><li>非连续分配的硬件辅助机制<ul><li>如何选择非连续分配中的内存分块大小？内碎片、外碎片问题？</li><li>段式存储管理（segmentation）：块大</li><li>页式存储管理（paging）：块小</li></ul></li></ul><h4 id="段机制"><a href="#段机制" class="headerlink" title="段机制"></a>段机制</h4><p><strong>段式存储管理</strong></p><p>进程的段地址空间由多个段组成：</p><ul><li>主代码段</li><li>子模块代码段</li><li>公用库代码段</li><li>堆栈段（stack）</li><li>堆数据（heap）</li><li>初始化数据段</li><li>符号表等</li></ul><p><strong>段式存储管理的目的：</strong></p><p>更细粒度和灵活的分离域共享</p><p><strong>段式地址空间的不连续二维结构：</strong></p><p>虽然在逻辑地址空间中，是按这一顺序排列的，但在物理地址空间中可以不是这样的。</p><p><strong>段访问机制</strong></p><p>概念：</p><ul><li>段表示访问方式和存储数据等属性相同的一段地址空间</li><li>对应一个连续的内存“块”</li><li>若干个段组成进程逻辑地址空间</li></ul><p>段访问：逻辑地址由二元组（s，addr）表示</p><ul><li>s——段号</li><li>addr——段内偏移</li><li>从单地址转换成“段基址+段内偏移”</li></ul><p>段访问的硬件实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">• 首先从逻辑地址中得到段号和偏移量</span><br><span class="line">• 在段表中查找段号，得到段基址和段长度</span><br><span class="line">• 由MMU来判断偏移量是否合法（偏移量是否大于段长度）</span><br><span class="line">• 得到物理地址，在物理内存中查找相应内容</span><br></pre></td></tr></table></figure><h4 id="页机制"><a href="#页机制" class="headerlink" title="页机制"></a>页机制</h4><p><strong>页式存储管理</strong></p><p>页帧（帧、物理页面、Frame、Page Frame）（这是物理的）</p><ul><li>把物理地址空间划分为大小相同的基本分配单位</li><li>2的n次方，如512,4096,8192，4k是常用大小</li></ul><p>页面（页、逻辑页面、Page）（这是逻辑的）</p><ul><li>把逻辑地址空间也划分为相同大小的基本分配单位</li><li>帧和页的大小必须是相同的</li></ul><p>页面到页帧之间的转换：</p><ul><li>逻辑地址到物理地址的转换</li><li>页表</li><li>MMU/TLB</li></ul><p><strong>帧（Frame）</strong></p><p>物理内存被划分成大小相等的帧</p><p>此时内存的物理地址可以表示成二元组（f，o），其中f是帧号，o是帧内的偏移量</p><p>物理地址的前F位可以换成帧号，后S位可以换成偏移量</p><ul><li>F：帧号，F位，共有2^F个帧</li><li>o：帧内偏移，S位，每帧有2^S字节</li><li>物理地址=f*2^S + o</li></ul><p>基于页帧的物理地址计算实例</p><p>假定：</p><ul><li>地址空间为16位</li><li>页帧大小为9位（512字节）</li></ul><p><strong>页（Page）</strong></p><p>进程逻辑地址空间被划分为大小相等的页</p><ul><li>页内偏移=帧内偏移</li><li>然而页号大小≠帧号大小，因为逻辑地址是连续的，但物理地址不一定是连续的</li></ul><p>进程逻辑地址的表示：二元组（p，o）</p><ul><li>p：页号（P位，2P个页）</li><li>o：页内偏移（S位，每页有2^S字节）</li></ul><p><strong>页式存储中的地址映射</strong></p><p>如何将页映射到帧？</p><ul><li>逻辑地址中的页号</li><li>物理地址中的帧号是不连续的</li><li>不是所有的页都有对应的帧</li></ul><p><strong>页表</strong></p><p>页表保存了逻辑地址（页号）——物理地址（帧号）之间的映射关系。</p><ul><li>CPU从逻辑地址中得到页号和偏移量</li><li>在页表中以页号作为下标查找帧号</li><li>用帧号和偏移量组成物理地址</li></ul><h4 id="普通页表"><a href="#普通页表" class="headerlink" title="普通页表"></a>普通页表</h4><p><strong>页表概述</strong></p><p>页表结构</p><p>每个进程都有一个页表</p><ul><li>每个页面对应一个页表项</li><li>随进程运行状态而动态变化（可以动态调整内存空间大小）</li><li>页表基址寄存器：PTBR，Page Table Base Register</li></ul><p>页表项的组成：</p><ul><li>帧号：f</li><li>页表项标志：<ul><li>存在位（resident bit）：逻辑页面是否存在与之对应的物理帧</li><li>修改位（dirty bit）：对应的页面中的内容是否被修改了</li><li>引用位（clock/reference bit）：在过去一段时间内是否访问过页中的某一个存储单元</li></ul></li></ul><p>页表地址转换实例<br>有了存在位之后，就会发现，有些逻辑页没有对应的物理帧</p><p><strong>页式存储管理机制的性能问题</strong></p><p>内存访问性能问题：</p><ul><li>访问一个内存单元需要2次内存访问</li><li>第一次访问：获取页表项</li><li>第二次访问：获取数据</li></ul><p>页表大小问题：</p><ul><li>页表可能非常大</li><li>64位机器如果每页1024字节，那么一个页表的大小会是多少？（2^54个页面*8个多字节）</li></ul><p>如何处理？</p><ul><li>缓存（Caching）</li><li>间接（Indirection）访问：切段，多级页表</li></ul><h4 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h4><p><strong>快表和多级页表</strong></p><p>快表（Translation Look-aside Buffer，TLB）</p><p>目标：缓存近期访问的页表项</p><ul><li>TLB使用关联存储（associated ），具备快速访问性能</li><li>关联存储器：有一组key，可以并行地查找所有表项，得到匹配项</li><li>因为快表位于CPU中，所以它的速度快、成本高、功耗大</li><li>如果TLB命中，物理页号可以很快被获取</li><li>如果TLB未命中，对应的表项被更新到TLB中</li></ul><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><p>多级页表</p><ul><li>通过间接引用将页号分成k级</li><li>可以有效减少每级页表的长度，但是如果所有的页表项都存在，则多级页表并没有减少存储量</li><li>不过大部分进程并不会用到所有的逻辑地址空间</li></ul><p>在x86架构中，CR3寄存器用于存储PTBR（页表基址）</p><h4 id="页寄存器"><a href="#页寄存器" class="headerlink" title="页寄存器"></a>页寄存器</h4><p><strong>反置页表</strong></p><p>减少页表占用的空间的一种做法</p><p>大地址空间问题</p><p>对于大地址空间（64-bits）系统，多级页表变得繁琐。</p><p>比如：5级页表</p><p>逻辑（虚拟）地址空间增长速度快于物理地址空间</p><p>页寄存器和反置页面的思路：</p><ul><li>不让页表与逻辑地址空间的大小相对应</li><li>让页表与物理地址空间的大小相对应</li></ul><p>页寄存器（Page Registers）</p><p>每个帧与一个页寄存器（Page Register）关联，寄存器内容包括：</p><ul><li>使用位（Residence bit）：此帧是否被进程占用</li><li>占用页号（Occupier）：对应的页号p</li><li>保护位（Protection bits）：约定这一页的访问方式，可读，可写……</li></ul><p>页寄存器示例</p><ul><li>物理内存大小：4096<em>4096=4K</em>4KB=16MB</li><li>页面大小：4096bytes=4KB</li><li>页帧数：4096=4K</li><li>页寄存器使用的空间：8*4096=32Kbytes（假定每个页寄存器占8字节）</li><li>页寄存器带来的额外开销：32K/16M=0.2%（大约）</li><li>虚拟内存的大小：任意</li></ul><p>页寄存器方案的特征</p><ul><li>优点<ul><li>页表大小相对于物理内存而言很小</li><li>页表大小与逻辑地址空间大小无关</li></ul></li><li>缺点<ul><li>页表信息对调后，需要根据帧号可找页号</li><li>在页寄存器中搜索逻辑地址中的页号</li></ul></li></ul><p>页寄存器中的地址转换</p><p>CPU生成的逻辑地址如何找对应的物理地址？</p><ul><li>对逻辑地址进行Hash映射，以减少搜索范围</li><li>需要解决可能的冲突</li></ul><p>用快表缓存页表项后的页寄存器搜索步骤</p><ul><li>对逻辑地址进行Hash变换</li><li>在快表中查找对应页表项</li><li>有冲突时遍历冲突项列表</li><li>查找失败时，产生异常</li></ul><p>快表的限制</p><ul><li>快表的容量限制</li><li>快表的功耗限制（StrongARM上快表功耗占27%）</li></ul><h4 id="反置页表"><a href="#反置页表" class="headerlink" title="反置页表"></a>反置页表</h4><p>反置页表</p><p>基于Hash映射值查找对应页表项中的帧号</p><ul><li>进程标识与页号的Hash值可能有冲突</li><li>页表项中包括保护位、修改位、访问位和存在位等标识</li></ul><p>查找过程：</p><ul><li>从逻辑地址中得到页号</li><li>根据页号和PID计算出Hash值</li><li>在反置页表中查找对应的页表项，核对页号是否一致，从中找出相应的物理帧号</li></ul><p>反置页表的Hash冲突</p><p>例子：在页表项中加入next项，指出全部冲突项的列表</p><h4 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h4><p><strong>段页式存储管理</strong><br>段页式存储管理的需求<br>段式存储在内存保护方面有优势，页式存储在内存利用和优化转移到后备存储方面有优势<br>段式存储和页式存储能否结合？</p><p><strong>段页式存储管理</strong><br>在段式存储管理基础上，给每个段加一级页表<br>逻辑地址：段号+若干个页号+页内偏移<br>物理地址：帧号+页内偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">• 从逻辑地址中得到段号s和页号p，以及偏移o</span><br><span class="line">• 通过段基址（STBR）和s得到对应的段表项</span><br><span class="line">• 访问段表项对应的页表，得到对应的帧号</span><br></pre></td></tr></table></figure><p><strong>段页式存储管理中的内存共享</strong><br>通过指向相同的页表基址，实现进程间的段共享</p><p><strong>共享段指向同一个页表</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>段式、页式、段页式内存分配总结</p><p>共同点</p><ul><li>可以不连续</li></ul><p>区别</p><ul><li>块的大小</li></ul><p>问题</p><ul><li>加入页表或段表</li><li>页表大小问题<ul><li>快表</li><li>多级页表</li><li>反置页表</li></ul></li><li>实现细节</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="选择填空题"><a href="#选择填空题" class="headerlink" title="选择填空题"></a>选择填空题</h3><p><strong>描述段管理机制正确的是()</strong></p><ul><li><strong>段的大小可以不一致</strong></li><li><strong>段可以有重叠</strong></li><li><strong>段可以有特权级</strong></li><li><strong>段与段之间是可以不连续的</strong></li></ul><p>都对。段的大小显然可以不一致（段描述符中给出的大小不同）。段之间可以重叠（没说不能重叠，而且完全扁平模型就是全都映射到全部物理内存。）段可以有特权级（段描述符中的DPL，访问段的最低特权级）。段之间当然也是可以不连续的。</p><hr><p><strong>描述页管理机制正确的是()</strong></p><ul><li><strong>页表在内存中</strong></li><li><strong>页可以是只读的</strong></li><li><strong>页可以有特权级</strong></li><li>上述说法都不对</li></ul><p>前三个都对。当然有的地方不太准确。在80386系统中，一级页表一定在内存中，但二级页表不一定在内存中。PDE和PTE都可以规定访问权限，不过只有U/S（用户/OS权限）和R/W（只读/可读可写）位。</p><hr><p><strong>页表项标志位包括()</strong></p><ul><li><strong>存在位(resident bit)</strong></li><li><strong>修改位(dirty bit)</strong></li><li><strong>引用位(clock/reference bit)</strong></li><li><strong>只读位(read only OR read/write bit)</strong></li></ul><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>为什么要设计非连续内存分配机制？</strong></p><ul><li>提高分配的灵活性</li><li>提高内存的利用效率</li><li>方便共享、充分利用内存空间<ul><li>允许一个程序使用非连续的物理地址空间</li><li>允许共享代码与数据</li><li>支持动态加载和动态链接</li></ul></li></ul><hr><p><strong>非连续内存分配中内存分块大小有哪些可能的选择？大小与大小是否可变?</strong></p><p>大块好管理，小块更灵活。段式存储下，大小是可变的，且块比较大。页式存储下，大小是固定的，且块比较小。</p><hr><p><strong>为什么在大块时要设计大小可变，而在小块时要设计成固定大小？小块时的固定大小可以提供多种选择吗？</strong></p><p>固定大小好管理，多种大小比一种大小灵活。可变大小更灵活，通常可变大小也会通过对齐来减少管理难度。小块时如果大小可变，则提供的灵活性没有那么多。</p><hr><p><strong>什么是段、段基址和段内偏移？</strong></p><p>段表示访问方式和存储数据的类型等属性相同的一段地址空间。段基址是段的起始地址（线性地址）。段内偏移是地址在段内的偏移量。</p><hr><p><strong>段式存储管理机制的地址转换流程是什么？为什么在段式存储管理中，各段的存储位置可以不连续？这种做法有什么好处和麻烦？</strong></p><p>段式存储管理中，地址转换是段基址（段号）加段内偏移。</p><p>段反映了程序的存储逻辑结构（数据段和代码段是分开的），程序不会从一个段的基址去访问另一个段，于是不同的段可以不连续。</p><p>好处是可以不连续，方便内存管理；麻烦是地址转换稍微复杂了一些。</p><hr><p><strong>什么是页（page）、帧（frame）、页表（page table）、存储管理单元（MMU）、快表（TLB, Translation Lookaside Buffer）和高速缓存（cache）？</strong></p><ul><li>页帧（帧、物理页面、Frame、Page Frame）（这是物理的）<ul><li>把物理地址空间划分为大小相同的基本分配单位</li><li>大小一般为2的n次方，如512、4096、8192字节，4KB是常用大小</li></ul></li><li>页面（页、逻辑页面、Page）（这是逻辑的）<ul><li>把逻辑地址空间也划分为相同大小的基本分配单位</li><li>帧和页的大小必须是相同的</li></ul></li><li>页表：保存了逻辑地址（页号）——物理地址（帧号）之间的映射关系</li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8D%95%E5%85%83" target="_blank" rel="noopener">MMU</a>：一种负责处理中央处理器（CPU）的内存访问请求的计算机硬件。它的功能包括虚拟地址到物理地址的转换（即虚拟内存管理）、内存保护、中央处理器高速缓存的控制，在较为简单的计算机体系结构中，负责总线的仲裁以及存储体切换</li><li><a href="https://zh.wikipedia.org/wiki/%E8%BD%89%E8%AD%AF%E5%BE%8C%E5%82%99%E7%B7%A9%E8%A1%9D%E5%8D%80" target="_blank" rel="noopener">TLB</a>：为CPU的一种缓存，由存储器管理单元用于改进虚拟地址到物理地址的转译速度</li><li><a href="https://zh.wikipedia.org/wiki/%E7%BC%93%E5%AD%98" target="_blank" rel="noopener">Cache</a>：访问速度比一般随机存取内存（RAM）快的一种RAM，通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术</li></ul><hr><p><strong>页式存储管理机制的地址转换流程是什么？为什么在页式存储管理中，各页的存储位置可以不连续？这种做法有什么好处和麻烦？</strong></p><p>页式存储管理中，地址转换流程是页号-&gt;物理页帧号加页内偏移。</p><p>CPU使用连续的逻辑地址，存储访问时，逻辑地址先分成逻辑页号和页内偏移，然后通过页表定义的对应关系，把逻辑页面转换成物理页号，最后再把物理页号加页内偏移得到物理地址；于是不同的页可以不连续。</p><p>好处是可以不连续，方便内存管理中的存储分配和回收；麻烦是地址转换比较复杂（页表项访问开销和页表存储开销），并且频繁进行（每次存储访问会变成两次或更多）。</p><hr><p><strong>页表大小受哪些因素影响？</strong></p><p>页大小、地址空间大小、进程数目、页表级数</p><hr><p><strong>快表（TLB）与高速缓存（cache）有什么不同？</strong></p><p>TLB中缓存的是线性地址<->物理地址的映射关系，由硬件管理，对软件是透明的。</-></p><p>Cache中缓存的是具体的内存内容，也由硬件管理，对软件是透明的。</p><hr><p><strong>为什么快表中查找物理地址的速度非常快？它是如何实现的？为什么它的的容量很小？</strong></p><p>因为它是在多个表项中同步查找有没有对应的线性地址项，所以很快。TLB的硬件是怎么实现的……大概瞎写吧。容量小是因为用电路换时间了（多路并行查找），成本和耗电量比较高。</p><hr><p><strong>什么是多级页表？多级页表中的地址转换流程是什么？多级页表有什么好处和麻烦？</strong></p><p>就是套了很多层的页表。地址转换流程就是不断根据每一级的页号和页表基址查找下一级的页表基址（或者查到页表项）。</p><p>好处是减小了页表占据的空间（因为程序一般不会用完自己的虚拟地址空间，所以大部分次级页表不需要生成）；麻烦是地址转换变得更加复杂和缓慢了。</p><hr><p><strong>页寄存器机制的地址转换流程是什么？</strong></p><p>对CPU访问的逻辑地址进行hash，然后查相应页寄存器。</p><p>用快表缓存页表项后的页寄存器搜索步骤</p><ul><li>对逻辑地址进行Hash变换</li><li>在快表中查找对应页表项</li><li>有冲突时遍历冲突项列表</li><li>查找失败时，产生异常</li></ul><hr><p><strong>反置页表机制的地址转换流程是什么？</strong></p><p>逻辑地址和进程号共同进行hash，然后查相应页寄存器。</p><p>查找过程：</p><ul><li>从逻辑地址中得到页号</li><li>根据页号和PID计算出Hash值</li><li>在反置页表中查找对应的页表项，核对页号是否一致，从中找出相应的物理帧号；处理hash冲突</li></ul><hr><p><strong>反置页表项有些什么内容？</strong></p><p>PID、逻辑页号、标志位（可能还应该有指向下一个hash相同的页表项的指针）</p><hr><p><strong>段页式存储管理机制的地址转换流程是什么？这种做法有什么好处和麻烦？</strong></p><p>首先从逻辑地址翻译成线性地址（段机制），再从线性地址翻译成物理地址（页机制）。</p><p>好处是……。。。</p><p>麻烦是，地址访问过程甚至变得更加复杂和耗时了。</p><hr><p><strong>如何实现基于段式存储管理的内存共享？</strong></p><p>……就把需要重用的内存映射到不同的段里……</p><hr><p><strong>如何实现基于页式存储管理的内存共享？</strong></p><p>不同的页表项指向相同的物理页……</p><hr><p><strong>请简要分析64bit CPU体系结构下的分页机制是如何实现的</strong></p><ul><li>说明64bit CPU架构的分页机制的大致特点和页表执行过程</li><li>正确描述了64bit CPU支持的物理内存大小限制（1分）</li><li>正确描述了64bit CPU下的多级页表的级数和多级页表的结构或反置页表的结构（2分）</li><li>除上述两点外，进一步描述了在多级页表或反置页表下的虚拟地址–&gt;物理地址的映射过程（3分）</li></ul><p>64位的寻址空间能够寻址16EB 的内存大小，对于目前的硬件来说太大了。在X64体系结构下，只实现了48位的虚拟地址。不同于x86体系结构，每级页表寻址长度变成9位，由于在x64体系结构中，普通页大小仍为4KB，然而数据却表示64位长，因此一个4KB页在x64体系结构下只能包含512项内容，所以为了保证页对齐和以页为单位的页表内容换入换出，在x64下每级页表寻址部分长度定位9位。</p><p>为了正确翻译x64的线性地址，其页表也从x86的2级变成了4级。翻译过程可参考Intel手册或者以下链接 <a href="http://www.cnblogs.com/lanrenxinxin/p/4735027.html" target="_blank" rel="noopener">http://www.cnblogs.com/lanrenxinxin/p/4735027.html</a></p><hr><p><strong>某系统使用请求分页存储管理，若页在内存中，满足一个内存请求需要150ns (10^-9s)。若缺页率是10%，为使有效访问时间达到0.5us(10^-6s),求不在内存的页面的平均访问时间。请给出计算步骤。</strong></p><p>500=0.9<em>150+0.1</em>x</p><p>（2）(spoc) 有一台假想的计算机，页大小（page size）为32 Bytes，支持32KB的虚拟地址空间（virtual address space）,有4KB的物理内存空间（physical memory），采用二级页表，一个页目录项（page directory entry ，PDE）大小为1 Byte,一个页表项（page-table entries PTEs）大小为1 Byte，1个页目录表大小为32 Bytes，1个页表大小为32 Bytes。页目录基址寄存器（page directory base register，PDBR）保存了页目录表的物理地址（按页对齐）。</p><p>PTE格式（8 bit） :</p><p>VALID | PFN6 … PFN0<br>PDE格式（8 bit） :</p><p>VALID | PT6 … PT0<br>其</p><p>VALID==1表示，表示映射存在；VALID==0表示，表示映射不存在。<br>PFN6..0:页帧号<br>PT6..0:页表的物理基址&gt;&gt;5<br>在物理内存模拟数据文件中，给出了4KB物理内存空间的值，请回答下列虚地址是否有合法对应的物理内存，请给出对应的pde index, pde contents, pte index, pte contents。</p><ol><li>Virtual Address 6c74<br>Virtual Address 6b22</li><li>Virtual Address 03df<br>Virtual Address 69dc</li><li>Virtual Address 317a<br>Virtual Address 4546</li><li>Virtual Address 2c03<br>Virtual Address 7fd7</li><li>Virtual Address 390e<br>Virtual Address 748b<br>比如答案可以如下表示： (注意：下面的结果是错的，你需要关注的是如何表示)</li></ol><p>Virtual Address 7570:<br>–&gt; pde index:0x1d pde contents:(valid 1, pfn 0x33)<br>–&gt; pte index:0xb pte contents:(valid 0, pfn 0x7f)<br>–&gt; Fault (page table entry not valid)</p><p>Virtual Address 21e1:<br>–&gt; pde index:0x8 pde contents:(valid 0, pfn 0x7f)<br>–&gt; Fault (page directory entry not valid)</p><p>Virtual Address 7268:<br>–&gt; pde index:0x1c pde contents:(valid 1, pfn 0x5e)<br>–&gt; pte index:0x13 pte contents:(valid 1, pfn 0x65)<br>–&gt; Translates to Physical Address 0xca8 –&gt; Value: 16<br>链接有上面链接的参考答案。请比较你的结果与参考答案是否一致。如果不一致，请说明原因。</p><p>（3）请基于你对原理课二级页表的理解，并参考Lab2建页表的过程，设计一个应用程序（可基于python、ruby、C、C++、LISP、JavaScript等）可模拟实现(2)题中描述的抽象OS，可正确完成二级页表转换。</p><p>链接有上面链接的参考答案。请比较你的结果与参考答案是否一致。如果不一致，提交你的实现，并说明区别。</p><p>（4）假设你有一台支持反置页表的机器，请问你如何设计操作系统支持这种类型计算机？请给出设计方案。</p><p>(5)X86的页面结构<br>扩展思考题<br>阅读64bit IBM Powerpc CPU架构是如何实现反置页表，给出分析报告。</p><p>interactive　understand VM<br>Virtual Memory with 256 Bytes of RAM：这是一个只有256字节内存的一个极小计算机系统。按作者的[[<a href="https://github.com/RobertElderSoftware/recc#what-can-this-project-do%7C%E7%89%B9%E5%BE%81%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">https://github.com/RobertElderSoftware/recc#what-can-this-project-do|特征描述</a>]]，它具备如下的功能。<br>CPU的实现代码不多于500行；<br>支持14条指令、进程切换、虚拟存储和中断；<br>用C实现了一个小的操作系统微内核可以在这个CPU上正常运行；<br>实现了一个ANSI C89编译器，可生成在该CPU上运行代码；<br>该编译器支持链接功能；<br>用C89, Python, Java, Javascript这4种语言实现了该CPU的模拟器；<br>支持交叉编译；<br>所有这些只依赖标准C库。 针对op-cpu的特征描述，请同学们通过代码阅读和执行对自己有兴趣的部分进行分析，给出你的分析结果和评价。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;段机制&lt;/li&gt;
&lt;li&gt;页机制&lt;ul&gt;
&lt;li&gt;普通页表&lt;/li&gt;
&lt;li&gt;快表&lt;/li&gt;
&lt;li&gt;多级页表&lt;/li&gt;
&lt;li&gt;页寄存器&lt;/li&gt;
&lt;li&gt;反置页表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;段页式存储管理
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 5 - 物理内存管理:连续内存分配</title>
    <link href="http://yoursite.com/2018/12/13/os-lecture-5-summary/"/>
    <id>http://yoursite.com/2018/12/13/os-lecture-5-summary/</id>
    <published>2018-12-12T16:03:51.000Z</published>
    <updated>2019-03-26T09:54:27.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><ul><li>计算机体系结构和内存层次</li><li>地址空间和地址生成</li><li>连续内存分配<ul><li>三种不同的分类策略</li><li>碎片整理</li><li>伙伴系统</li></ul></li><li>uCore 中的连续内存管理实现框架<a id="more"></a><h4 id="计算机体系结构和内存层次"><a href="#计算机体系结构和内存层次" class="headerlink" title="计算机体系结构和内存层次"></a>计算机体系结构和内存层次</h4></li></ul><p>计算机体系结构由 CPU、内存、I/O 设备、总线组成。</p><p>CPU 中包括：</p><ul><li>ALU、控制逻辑</li><li>寄存器</li><li>高速缓存：加快读写速度</li><li>存储管理单元 (MMU)</li></ul><p>内存的特点：</p><ul><li>最小访问单位是字节 (8 bit )</li><li>一次可以读 / 写 4 字节 (32 位)，有地址对其问题</li></ul><p>内存可以分为如下层次：</p><ul><li>CPU 中：<ul><li>L1 缓存</li><li>L2 缓存</li><li>这些缓存都是由硬件 (MMU) 来控制的，软件看不到</li></ul></li><li>高速缓存未命中：( 这之下由操作系统软件来控制)<ul><li>内存</li></ul></li><li>缺页</li><li>外存 ( 虚拟内存 )</li></ul><h4 id="操作系统的内存管理"><a href="#操作系统的内存管理" class="headerlink" title="操作系统的内存管理"></a>操作系统的内存管理</h4><p>OS 内存管理的特点：</p><ul><li>每个字节有自己的物理地址</li><li>分为内存和外存</li><li>每个进程有自己用的内存片，它们自己的地址之间是可以重叠的</li><li>MMU：将逻辑 ( 虚拟 ) 地址空间转换为物理地址空间</li></ul><p>OS 内存管理的目标：</p><ul><li>抽象：逻辑地址空间</li><li>保护：独立地址空间</li><li>共享：访问相同内存</li><li>虚拟化：更大的地址空间</li></ul><p>操作系统采用的内存管理方式：</p><ul><li>重定位 (relocation)：段地址 + 偏移</li><li>分段 (segmentation)：程序的逻辑结构不需要连成一片，而是分成代码、数据、堆栈 3 块，每一块的空间就减少了；但每段的内容是连续的</li><li>分页 (paging)：把内存分成最基本的单位</li><li>虚拟存储 (virtual memory)：目前多数系统 ( 如 Linux ) 采用的是按需页式虚拟存储</li></ul><p>内存管理方式的实现是高度依赖硬件的：</p><ul><li>与计算机存储架构紧密耦合</li><li>MMU (内存管理单元)：处理 CPU 存储访问请求的硬件</li></ul><blockquote><p>静态地址重定位：即在程序装入内存的过程中完成，是指在程序开始运行前，程序中的各个地址有关的项均已完成重定位，地址变换通常是在装入时一次完成的，以后不再改变，故成为静态重定位。<br>优点：无需硬件支持<br>缺点：1）程序重定位之后就不能在内存中搬动了；2）要求程序的存储空间是连续的，不能把程序放在若干个不连续的区域中。<br>动态地址重定位：不是在程序执行之前而是在程序执行过程中进行地址重定位。更确切的说，是在每次访问内存单元前才进行地址变换。动态重定位可使装配模块不加任何修改而装入内存，但是它需要硬件一定位寄存器的支持。<br>优点：1）目标模块装入内存时无需任何修改，因而装入之后再搬迁也不会影响其正确执行，这对于存储器紧缩、解决碎片问题是极其有利的；2）一个程序由若干个相对独立的目标模块组成时，每个目标模块各装入一个存储区域，这些存储区域可以不是顺序相邻的，只要各个模块有自己对应的定位寄存器就行。<br>缺点：需要硬件支持。</p></blockquote><h4 id="地址空间和地址生成"><a href="#地址空间和地址生成" class="headerlink" title="地址空间和地址生成"></a>地址空间和地址生成</h4><p>一般来说，地址空间至少有 3 种：</p><ul><li>物理地址空间：硬件支持的地址空间<ul><li>起始地址 0 </li><li>到 MAXsys </li></ul></li><li>线性地址空间：CPU 看到的地址<ul><li>起始地址 0</li><li>大小取决于地址线的宽度</li></ul></li><li>逻辑地址空间：在 CPU 中运行的进程看到的地址<ul><li>起始地址 0 </li><li>到 MAXprog</li><li>也就是用户程序可见的地址</li></ul></li></ul><p>逻辑地址的生成需要经过如下几个过程：</p><ul><li>高级语言程序：写出函数</li><li>编译：对源代码进行编译，称为汇编源代码，此时仍然用符号来指代函数</li><li>汇编：汇编成二进制代码，用具体地址来替代符号了，但是有一些函数还没有找到</li><li>链接：加入函数库，找到库函数的地址</li><li>重定位：程序加载时进行，视程序实际位置改变符号地址</li></ul><p>一般来说，生成地址有几个时机：</p><ul><li>编译时（优点：简单）<ul><li>假设起始地址已知</li><li>但如果起始地址改变，就必须重新编译</li><li>功能手机一般会有这种情况</li></ul></li><li>加载时<ul><li>如果加载时起始位置未知，编译器需生成可重定位的代码 ( relocation code )</li><li>加载时，生成绝对地址</li></ul></li><li>执行时（优点：灵活）<ul><li>执行时代码可移动</li><li>需地址转换（映射）硬件支持（一般是虚拟存储）</li></ul></li></ul><h4 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h4><p>一般分配给一个进程的地址空间是连续的，因此需要进行有效的内存分配。需求是，给进程分配一块不小于制定大小的连续的物理内存区域。定义碎片是过小的不能被利用的空闲内存，分为 2 类：</p><ul><li>外部碎片：分配单元之间的未被使用内存</li><li>内部碎片：分配单元内部的未被使用内存（一般是否有内碎片取决于分配单元大小是否要取整）</li></ul><p>我们在 uCore 中进行的是动态内存分配，需要满足如下要求：</p><ul><li>当程序被加载执行时，分配一个进程指定大小可变的分区（块）</li><li>分区的地址是连续的</li></ul><p>一般来说，操作系统需要维护至少 2 个数据结构，里面存储的内容是：</p><ul><li>所有进程的已分配分区</li><li>空闲分区 ( Empty-blocks )</li></ul><p>常见的几种连续内存分配策略包括：</p><ul><li>最先匹配 (First-fit)</li><li>最佳匹配 (Best-fit)</li><li>最差匹配 (worst-fit)</li></ul><p>总的来说，这些匹配方式各有优劣，至于到底是什么优劣，与使用场景关系很大。</p><h4 id="三种不同的分类策略"><a href="#三种不同的分类策略" class="headerlink" title="三种不同的分类策略"></a>三种不同的分类策略</h4><p><strong>最先匹配 (First Fit Allocation) 策略</strong></p><p>思路：需要分配 n 个字节时，使用第一个可用的空间比 n 打的空闲块</p><p>原理和实现：</p><ul><li>空闲分区列表按地址顺序排序</li><li>分配时搜索第一个合适的分区</li><li>释放分区时，检查是否可与邻近的空闲分区合并</li></ul><p>优点：</p><ul><li>简单</li><li>在搞地质空间有大块的空闲分区</li></ul><p>缺点</p><ul><li>容易产生外部碎片</li><li>分配大块时较慢</li></ul><p><strong>最佳匹配 (Best Fit Allocation) 策略</strong></p><p>思路：分配 n 字节内存时，查找并使用不小于 n 的最小空闲分区</p><p>原理和实现：</p><ul><li>空闲分区列表按照大小排序</li><li>分配时，查找一个合适的分区</li><li>释放时，查找并合并邻近的空闲分区（如果找到）</li></ul><p>优点：</p><ul><li>大部分分配的尺寸较小时，效果很好<ul><li>可避免大的空闲分区被拆分</li><li>可减少外部碎片的大小</li><li>相对简单</li></ul></li></ul><p>缺点：</p><ul><li>外部碎片较多</li><li>释放分区较慢</li><li>容易产生很多无用的小碎片</li></ul><p><strong>最差匹配 (Worst Fit Allocation) 策略</strong></p><p>思路：分配 n 字节时，使用尺寸不小于 n 的最大空闲分区</p><p>原理和实现：</p><ul><li>空闲分区列表由大到小排序</li><li>分配时，选最大的分区</li><li>释放时检查是否可与邻近的空闲分区合并，进行可能的合并，并调整空闲分区列表顺序</li></ul><p>优点：</p><ul><li>中等大小的分配较多时，效果最好</li><li>避免出现太多的小碎片</li></ul><p>缺点：</p><ul><li>释放分区较慢</li><li>外部碎片较多</li><li>容易破坏打的空闲分区，因此难以分配大的分区</li></ul><h4 id="碎片整理"><a href="#碎片整理" class="headerlink" title="碎片整理"></a>碎片整理</h4><p>上述方法都会产生外碎片。（但是不会产生内碎片，因为是按需分配的）如果碎片太多，就有可能出现，即使空余内存总数足够大，也无法分配出一块连续内存的情况。为此就需要进行碎片整理。碎片整理的定义是通过调整进程占用的分区位置来减少或避免分区碎片。一般有两种碎片整理的方法</p><ul><li>紧凑（compaction）通过移动分配给进程的内存分区，以合并外部碎片<ul><li>进行碎片紧凑的条件：所有的应用程序可动态重定位</li><li>需要在应用程序等待时进行移动</li><li>需要考虑开销</li></ul></li><li>分区对换（Swapping in/out）：通过抢占并回收处于等待状态进程的分区，以增大可用内存空间<ul><li>这就让更多进程能够在内存里交替运行</li><li>需要解决的问题：交换哪个（些）进程？</li><li>swap分区在linux中是耳熟能详的，在早期很有用，但代价很大，因为外存的速度远远慢于内存</li><li>有了虚拟页式存储之后，纯粹的分区对换的意义就不大了</li></ul></li></ul><h4 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h4><p>伙伴系统（Buddy System）是一种连续存储分配的办法，它解决了分配位置和碎片的问题。</p><p>假定整个可分配的分区大小为2u，伙伴系统的分配和释放过程如下：</p><ul><li>分配过程：<ul><li>需要的分区大小为2u−1&lt;s≤2u时，把整个块分配给该进程</li><li>若s≤2i−1−1，则将大小为2i的当前空闲分区划分成两个大小为2i−1−1的空闲分区</li><li>重复划分过程，直到2i−1&lt;s≤2i，并把一个空闲分区分配给该进程</li></ul></li><li>释放过程：<ul><li>将进程占用的块释放</li><li>查看它能否与相邻的空闲块合并（注意边界条件）</li><li>如果能合并，则不断合并到不能再合并为止</li></ul></li></ul><p>由分析可知，内碎片的大小最多是2i−1−1，没有外碎片。</p><h5 id="伙伴系统的具体实现"><a href="#伙伴系统的具体实现" class="headerlink" title="伙伴系统的具体实现"></a>伙伴系统的具体实现</h5><p>数据结构：</p><ul><li>空闲块按大小和起始地址组织成二维数组（或者说一维数组+一维链表）</li><li>第一维：大小；第二维：地址</li><li>初始状态：只有一个大小为2u的空闲块</li></ul><p>分配过程：</p><ul><li><strong>由小到大</strong> 在空闲块数组中找最小的可用空闲块（只要有合适的空闲块，就不切分大块，这是隐含的一个原则吧）</li><li>如果块太大，则对可用空闲块进行二等分，直到得到合适大小的块</li></ul><p>释放过程：</p><ul><li>把释放的块放入空闲块数组</li><li>合并满足合并条件的空闲块，合并条件是：<ul><li>大小相同，均为2i</li><li>地址相邻</li><li>相邻两块的低地址必须是2^(i+1)的倍数</li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="选择填空题"><a href="#选择填空题" class="headerlink" title="选择填空题"></a>选择填空题</h4><p><strong>操作系统中可采用的内存管理方式包括()</strong></p><ul><li><strong>重定位(relocation)</strong></li><li><strong>分段(segmentation</strong></li><li><strong>分页(paging)</strong></li><li><strong>段页式（segmentation+paging）</strong></li></ul><p>都有。虽然我还是很难想象重定位是内存管理方式，这难道不是进程的管理方式么，虽然能够把进程在内存中搬移大概是上述几种分配策略的前提……</p><hr><p><strong>在启动页机制的情况下，在CPU运行的用户进程访问的地址空间是()</strong></p><ul><li>物理地址空间</li><li><strong>逻辑地址空间</strong></li><li>外设地址空间</li><li>都不是</li></ul><p>用户进程访问的内存地址是虚拟地址。虚拟地址加上对应的段选择子构成逻辑地址。逻辑地址经过分段翻译成线性地址。线性地址经过分页翻译成物理地址。（但是，即使没有启动页机制，用户进程访问的地址空间也应该是逻辑地址空间吧）</p><hr><p><strong>连续内存分配的算法中，会产生外碎片的是()</strong></p><ul><li><strong>最先匹配算法</strong></li><li><strong>最差匹配算法</strong></li><li><strong>最佳匹配算法</strong></li><li>都不会</li></ul><p>三种算法都会有外碎片，而没有内碎片。相比之下，分页不会有外碎片，只会有内碎片。伙伴系统是可能会产生外碎片的，当然也有内碎片。</p><hr><p><strong>在使能分页机制的情况下，更合适的外碎片整理方法是()</strong></p><ul><li>紧凑(compaction)</li><li>分区对换(Swapping in/out)</li><li><strong>都不是</strong></li></ul><p>分页方式不会有外碎片。虽然很对，但这道题完全毫无意义。</p><hr><p><strong>描述伙伴系统(Buddy System)特征正确的是()</strong></p><ul><li><strong>多个小空闲空间可合并为大的空闲空间</strong></li><li><strong>会产生外碎片</strong></li><li><strong>会产生内碎片</strong></li><li>都不对</li></ul><p>小空闲空间在满足一定条件时可以合并。因为是一个不断二分的过程，所以外碎片是可能会产生的。因为是分配2的幂大小的内存，所以内碎片也是有的。</p><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>操作系统中存储管理的目标是什么？</strong></p><ul><li>抽象</li><li>保护</li><li>共享</li><li>虚拟化</li></ul><hr><p><strong>描述编译、汇编、链接和加载的过程是什么？</strong></p><ul><li>编译：将程序源代码转换为汇编代码</li><li>汇编：将汇编代码转为二进制的机器码</li><li>链接：将多个二进制的机器码结合成一个可执行环境</li><li>加载：将程序从外存中加载到内存中</li></ul><hr><p><strong>什么是内碎片、外碎片？</strong></p><p>内碎片是指分配给任务的内存大小比任务所要求的大小所多出来的内存。外碎片指分配给任务的内存之间无法利用的内存。当然，一块内存是否为外碎片取决于需要分配的内存的大小。</p><hr><p><strong>最先匹配会越用越慢吗？请说明理由（可来源于猜想或具体的实验）？</strong></p><p>最先匹配总是先找低地址空间的内存，到后期低地址空间都是大量小的不连续的内存空间，每次都要扫描低地址空间后到达高地质空间才能得到可用的内存。所以大概是会越用越慢的。</p><hr><p><strong>最差匹配的外碎片会比最优适配算法少吗？请说明理由（可来源于猜想或具体的实验）</strong></p><p>应该会的。因为每次都找到最大的内存块进行分割，因此分割剩下的内存块也很大，往往还可以再装下一个程序。</p><hr><p><strong>理解0:最优匹配，1:最差匹配，2:最先匹配，3:buddy systemm算法中分区释放后的合并处理过程？ (optional)</strong></p><p>它们的处理方式都是查看边上是否也有空闲块，如果有，则合并空闲块，然后将空闲块管理数据插入链表中。如果能进行合并，都需要连续合并。当然，伙伴系统的合并过程需要判断是否满足条件。</p><hr><p><strong>对换和紧凑都是碎片整理技术，它们的主要区别是什么？为什么在早期的操作系统中采用对换技术？</strong></p><p>区别是，紧凑是在内存中搬动进程占用的内存位置，以合并出大块的空闲块；对换是把内存中的进程搬到外存中，以空出更多的内存空闲块。采用对换的原因是，处理简单。不过代价也比较高，因为外存比较慢。</p><hr><p><strong>伙伴系统的空闲块如何组织？</strong></p><p>按照内存的大小由一系列链表组织。类似于哈希表，将相同大小的内存区域首地址连接起来。（因为一般来说，内存要按首地址大小排列，链表的插入删除比较简单啊）</p><hr><p><strong>伙伴系统的内存分配流程？</strong></p><p>当向内核请求分配(2i−1，2i]数目的页块时，按照2i大小的块来请求处理。如果对应的块链表中没有空闲页块，则在更大的页块链表中找空闲块，并将大块进行切分，直到得到满足要求的块。如果切出了多余的块，伙伴系统会将这些块插入到对应的空闲页块链表中。</p><hr><p><strong>伙伴系统的内存回收流程？</strong></p><p>当释放多页的块时，内核首先计算出该内存块的伙伴的地址。内核将满足以下条件的三个块称为伙伴：</p><ol><li>两个块具有相同的大小，记作b。</li><li>它们的物理地址是连续的。</li><li>第一块的第一个页的物理地址是2∗(2b)的倍数。</li></ol><p>如果找到了该内存块的伙伴，确保该伙伴的所有页都是空闲的，以便进行合并。内存继续检查合并后页块的“伙伴”并检查是否可以合并，依次类推。</p><p>（所以才叫伙伴系统，了解了）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机体系结构和内存层次&lt;/li&gt;
&lt;li&gt;地址空间和地址生成&lt;/li&gt;
&lt;li&gt;连续内存分配&lt;ul&gt;
&lt;li&gt;三种不同的分类策略&lt;/li&gt;
&lt;li&gt;碎片整理&lt;/li&gt;
&lt;li&gt;伙伴系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;uCore 中的连续内存管理实现框架
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 4 - 实验:系统软件启动过程</title>
    <link href="http://yoursite.com/2018/12/08/os-lecture-4-summary/"/>
    <id>http://yoursite.com/2018/12/08/os-lecture-4-summary/</id>
    <published>2018-12-07T16:03:51.000Z</published>
    <updated>2019-03-26T09:54:24.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><p>主要介绍了一些和 Lab1 相关的内容。（对 C++ 一窍不通。。羞耻，只是大致了解一下，有时间和精力要对照试验内容认真补一下。。。</p><ul><li>系统启动过程<ul><li>BIOS</li><li>BootLoader<ul><li>段机制</li><li>操作系统的加载</li></ul></li></ul></li><li>C 语言的一些相关的只是<ul><li>函数调用过得实现（略）</li><li>GCC 内联汇编（略）</li></ul></li><li>x86 架构下的中断处理过程<a id="more"></a><h4 id="系统启动过程"><a href="#系统启动过程" class="headerlink" title="系统启动过程"></a>系统启动过程</h4></li></ul><p><strong>BIOS</strong></p><p>BIOS 的工作过程已经在第三讲中详细说过了，在此不再重复。唯一值得注意的是，虽然实模式下的寻址方式是 Base (16 位寄存器 CS)*16+Offset (16位寄存器IP) = 线性地址( 20 位)，但这并不是段机制。</p><p><strong>bootloader</strong></p><p>BIOS 将控制权转交给bootloader。它的工作内容主要包括：</p><ul><li>使能保护模式 ( protection mode ) 和段机制 (segment level protection)，切换回 32 位 4G 的寻址空间，对段机制进行初始化</li><li>从硬盘上读取 ELF 格式的 ucore kernel (位于 MBR 后面的扇区) 并放到内存中固定的位置。</li><li>跳转到 ucore OS 的入口点 (entry point)，将控制权转交给 ucore OS</li></ul><p><strong>使能保护模式</strong></p><p>将系统寄存器 CR0 的第 0 个 bit 置为 1，说明进入保护模式。当然，在此之前要开 A20，并准备好 GDT 表，将基址加载到 GDT 基址寄存器中。</p><p><strong>段机制</strong></p><p>保护模式下必须开启段机制。</p><p>总的来说，段机制其实是一种映射关系。一个段指向的是线性地址空间中一段连续的内存，有基址和 limit 。短与段之间是可以重叠的。</p><p>设置段机制的方法是，建立一个数组来存储段描述符表，称为全局描述符表 GDT (也称为段表，在 ucore 中是由 bootloader 建立的，因为开启保护模式之前就需要设置好 GDT )，其中包括描述符表的位置、大小等信息。这样 CPU 就可以找到段表了 (用 GDTR 寄存器保存表信息)。除了设置 GDT 之外，还要为 CS、DS 等段寄存器设置好对应的 index，使他们能够指向全局描述符表 GDT 对应的项，这可以在切换到保护模式之后进行。</p><p>硬件提供了一些段寄存器。这些段寄存器指向段描述符，比较重要的几个段寄存器包括：</p><ul><li>CS : 代码段寄存器</li><li>DS : 数据段寄存器</li><li>SS : 堆栈段寄存器</li></ul><p>段寄存器的结构是这样的：</p><ul><li>高 13 位：GDT index</li><li>1 位：TI，一般设置为0，因为没有用到 LDT (本地描述符表)</li><li>2位：RP，表明段优先级，有 4 个特权级，一般应用程序放在 3 , 操作系统放在 0</li></ul><p>每个段寄存器指向一个 GDT 或者 LDT 中的段描述符。段描述符描述了一个段的起始地址和它的大小。(一个段描述符的大小是 8 字节，具体内容比较复杂。。。忽略)</p><p>uCore 中采用过的应该是 Intel 手册中提到的扁平保护模型。</p><p><img src="https://shinhwa-1258620884.cos.ap-beijing.myqcloud.com/image/1548928847605.png" alt></p><p>在设置完所需的表和寄存器之后，段机制就可以完成从逻辑地址到线性地址（在页机制没有开启的时候，线性地址 = 物理地址）的翻译了。</p><p><img src="https://shinhwa-1258620884.cos.ap-beijing.myqcloud.com/image/1548928968301.png" alt></p><ul><li>通过逻辑地址中的段选择子查找段描述符表项</li><li>从表项中读出段基址和段的大小</li><li>检查逻辑地址中的 offset 是否合法</li><li>安全性检查</li><li>段基址 (Base Address) + 段内偏移量 (offset) = 线性地址 (linear address)</li></ul><h4 id="代码实现过程"><a href="#代码实现过程" class="headerlink" title="代码实现过程"></a>代码实现过程</h4><p>（略。。。）</p><h4 id="x86-架构下的中断处理过程"><a href="#x86-架构下的中断处理过程" class="headerlink" title="x86 架构下的中断处理过程"></a>x86 架构下的中断处理过程</h4><p>此处的 “中断” 包括两类：</p><ul><li>中断 (Interrupts)<ul><li>外部中断 (External (hardware generated) interrupts)：串口、硬盘、网卡、时钟</li><li>软件产生的中断 (Software generated interrupts)：INT n指令，通常用于系统调用</li></ul></li><li>异常 (Exceptions)<ul><li>程序错误</li><li>软件产生的异常 (Software generated excetpion)：INTO, INT 3 和 BOUND</li><li>机器检查出的异常</li></ul></li></ul><h4 id="通过中断号确定中断服务例程-ISR"><a href="#通过中断号确定中断服务例程-ISR" class="headerlink" title="通过中断号确定中断服务例程 ( ISR )"></a>通过中断号确定中断服务例程 ( ISR )</h4><p>（略。。。）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;p&gt;主要介绍了一些和 Lab1 相关的内容。（对 C++ 一窍不通。。羞耻，只是大致了解一下，有时间和精力要对照试验内容认真补一下。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统启动过程&lt;ul&gt;
&lt;li&gt;BIOS&lt;/li&gt;
&lt;li&gt;BootLoader&lt;ul&gt;
&lt;li&gt;段机制&lt;/li&gt;
&lt;li&gt;操作系统的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C 语言的一些相关的只是&lt;ul&gt;
&lt;li&gt;函数调用过得实现（略）&lt;/li&gt;
&lt;li&gt;GCC 内联汇编（略）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x86 架构下的中断处理过程
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 3 - 启动、中断、异常和系统调用</title>
    <link href="http://yoursite.com/2018/12/02/os-lecture-3-summary/"/>
    <id>http://yoursite.com/2018/12/02/os-lecture-3-summary/</id>
    <published>2018-12-01T16:03:51.000Z</published>
    <updated>2019-03-26T09:54:18.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><ul><li>系统启动过程<ul><li>BIOS 的原理</li><li>BIOS 的一些具体工作</li><li>系统启动规范</li></ul></li><li>中断，异常和系统调用<ul><li>中断</li><li>系统调用<a id="more"></a><h3 id="系统启动过程"><a href="#系统启动过程" class="headerlink" title="系统启动过程"></a>系统启动过程</h3></li></ul></li></ul><p><strong>BIOS 的基本功能</strong></p><p>计算机刚刚启动时的内存布局如图：</p><table><thead><tr><th>地址</th><th>用途</th></tr></thead><tbody><tr><td>(4GB - 64KB) ~ 4GB</td><td>实际BIOS ROM</td></tr><tr><td>1MB ~ (4GB - 64KB)</td><td>空闲空间</td></tr><tr><td>640KB ~ 1MB</td><td>视频内存，BIOS启动固件（映射）</td></tr><tr><td>0 ~ 640KB</td><td>空闲空间</td></tr></tbody></table><p>（这是一个非常简略的示意图，具体请见<a href="https://wiki.osdev.org/Memory_Map_(x86" target="_blank" rel="noopener">Memory Map (x86)</a>)）</p><blockquote><p>这一复杂的映射机制是为了保证向后兼容而设计的。在8086时代，内存只有1MB大小，此时，BIOS的代码固化在EPROM中，且EPROM被编址在1MB内存地址空间的最高64KB中。PC加电后，CS寄存器初始化为0xF000，IP寄存器初始化为0xFFF0，所以CPU要执行的第一条指令的地址为<code>CS:IP=0xF000:0XFFF0</code>（ Segment:Offset表示） =<code>0xFFFF0</code>（ Linear表示） 。这个地址位于被固化的EPROM中，该地址存储了一条指令，它是一个长跳转指令<code>JMP F000:E05B</code>。这样就开启了BIOS的执行过程。</p></blockquote><blockquote><p>到了32位的80386 CPU时代，内存空间扩大到了4G，多了段机制和页机制。如果仍然把BIOS启动固件编址在0xF0000起始的64KB内存地址空间内，就会把整个物理内存地址空间隔离成不连续的两段，一段是0xF0000以前的地址，一段是1MB以后的地址，这很不协调。为此，intel采用了一个折中的方案：默认将执行BIOS ROM编址在32位内存地址空间的最高端，即位于4GB地址的最后一个64KB内。在PC系统开机复位时，CPU进入实模式，并将CS寄存器设置成0xF000，将它的shadow register的Base值初始化设置为0xFFFF0000，EIP寄存器初始化设置为0x0000FFF0。所以机器执行的第一条指令的物理地址是0xFFFFFFF0。80386的BIOS代码也要和以前8086的BIOS代码兼容，故地址0xFFFFFFF0处的指令还是一条长跳转指令<code>jmp F000:E05B</code>。注意，这个长跳转指令会更新CS寄存器和它的shadowregister，即执行<code>jmp F000:E05B</code>后，CS将被更新成<code>0xF000</code>。表面上看CS其实没有变化，但CS的shadow register被更新为另外一个值了，它的Base域被更新成<code>0x000F0000</code>，此时形成的物理地址为<code>Base+EIP=0x000FE05B</code>，这就是CPU执行的第二条指令的地址。此时这条指令的地址已经是1M以内了，且此地址不再位于BIOS ROM中，而是位于RAM空间中。由于Intel设计了一种映射机制，将内存高端的BIOS ROM映射到1MB以内的RAM空间里，并且可以使这一段被映射的RAM空间具有与ROM类似的只读属性。所以PC机启动时将开启这种映射机制，让4GB地址空间的最高一个64KB的内容等同于1MB地址空间的最高一个64K的内容，从而使得执行了长跳转指令后，其实是回到了早期的8086 CPU初始化控制流，保证了向下兼容。</p></blockquote><p>上述说明指出，在 CPU 启动之后，它一直处于实模式之下，执行的第一条指令是 <code>jmp F000:E05B</code> ，跳转到 BIOS 程序中。此时，<code>PC = 16 * CS + IP</code>，系统地址空间只有 20 位（1MB）。</p><ul><li>20 位地址空间：1MB</li></ul><p>这之后 BIOS 会进入以下工作：</p><ul><li>在实模式下提供基本输入输出方法<ul><li>通过中断调用实现</li><li>只能在实模式下使用，操作系统无法使用</li></ul></li><li>运行自检程序</li><li>用户选择引导设备（从什么介质启动）</li><li>将 BootLoader 从磁盘的引导扇区加载到内存中 <code>0x7c00</code> 开始的位置</li><li>跳转到 BootLoader的位置：<code>CS:IP=0000:7C00</code><ul><li>系统设置信息</li><li>开机后自检程序</li><li>系统自启动程序等</li></ul></li></ul><p>这之后，控制权就交给 BootLoader：</p><ul><li>切换到保护模式</li><li>将操作系统的代码和数据从硬盘加载到内存中（因为 BIOS 无法处理硬件的文件系统）</li><li>跳转到操作系统的起始地址</li></ul><p>加载之后的内存布局如下表：</p><table><thead><tr><th>地址</th><th>用途</th></tr></thead><tbody><tr><td>(4GB - 64KB) ~ 4GB</td><td>实际BIOS ROM</td></tr><tr><td>? ~ (4GB - 64KB)</td><td>空闲空间</td></tr><tr><td>1MB ~ ?</td><td>操作系统</td></tr><tr><td>640KB ~ 1MB</td><td>视频内存，BIOS启动固件（映射）</td></tr><tr><td>? ~ 640KB</td><td>空闲空间</td></tr><tr><td>0x7c00 ~ ?</td><td><strong>bootloader</strong></td></tr><tr><td>0 ~ 0x7c00</td><td>BIOS数据</td></tr></tbody></table><p>最后，bootloader把控制权转交给操作系统。</p><h3 id="BIOS-的一些具体工作"><a href="#BIOS-的一些具体工作" class="headerlink" title="BIOS 的一些具体工作"></a>BIOS 的一些具体工作</h3><p><strong>BISO 本身的初始化内容</strong></p><ul><li>硬件自检 POST</li><li>检测系统中内存和显卡等关键部件的存在和工作状态</li><li>查找并执行显卡等接口卡 BIOS，进行设备初始化</li><li>执行系统 BIOS，进行系统检测：检测和配置系统中安装的即插即用设备</li><li>更新 CMOS 中的扩展系统配置数据 ESCD </li><li>按指定启动顺序从硬盘、软盘等设备启动</li></ul><p><strong>BIOS 如何读取 BootLoader</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95" target="_blank" rel="noopener">Wiki</a>上是这么说的：</p><ul><li>系统开机或者重启。<ul><li>BIOS加电（台湾用语：开机）自检（Power On Self Test – POST）。BIOS执行内存地址为FFFF:0000H处的跳转指令，跳转到固化在ROM中的自检程序处，对系统硬件（包括内存）进行检查。</li><li>读取主引导记录（MBR）。当BIOS检查到硬件正常并与CMOS中的设置相符后，按照CMOS中对启动设备的设置顺序检测可用的启动设备。BIOS将相应启动设备的第一个扇区（也就是MBR扇区）读入内存地址为0000:7C00H处。</li><li>检查0000:7DFEH-0000:7DFFH（MBR的结束标志位）是否等于55AAH，若不等于则转去尝试其他启动设备，如果没有启动设备满足要求则显示”NO ROM BASIC”然后死机。</li><li>当检测到有启动设备满足要求后，BIOS将控制权交给相应启动设备。启动设备的MBR将自己复制到0000:0600H处，然后继续执行。<br>根据MBR中的引导代码启动引导程序。</li></ul></li><li>事实上，BIOS不仅检查0000:7DFEH-0000:7DFFH（MBR的结束标志位）是否等于55AAH，往往还对磁盘是否有写保护、主引导扇区中是否存在活动分区等进行检查。如果发现磁盘有写保护，则显示磁盘写保护出错信息；如果发现磁盘中不存在活动分区，则显示类似如下的信息“Remove disk or other media Press any key to restart”。</li></ul><p>标准MBR的结构如下：</p><table><thead><tr><th>地址（十进制）</th><th>描述</th><th>长度（字节）</th></tr></thead><tbody><tr><td>0</td><td>代码区</td><td>440（最大446）</td></tr><tr><td>440</td><td>选用磁盘标志</td><td>4</td></tr><tr><td>444</td><td>一般为空值; 0x0000</td><td>2</td></tr><tr><td>446</td><td>标准MBR分区表规划（四个16 byte的主分区表入口）</td><td>64</td></tr><tr><td>510</td><td>MBR有效标志：0x55AA</td><td>2</td></tr></tbody></table><h4 id="系统启动规范"><a href="#系统启动规范" class="headerlink" title="系统启动规范"></a>系统启动规范</h4><p>课程中还讲到了BIOS-MBR、BIOS-GPT、PXE和UEFI等系统启动规范，其中UEFI似乎还更重要一点。这似乎是通用的现代BIOS标准。</p><h3 id="中断、异常和系统调用"><a href="#中断、异常和系统调用" class="headerlink" title="中断、异常和系统调用"></a>中断、异常和系统调用</h3><p>定义：</p><ul><li>系统调用（System Call)：应用程序主动向操作系统发出的服务请求</li><li>异常（Exception)：非法指令或其他原因导致当前指令执行失败（如：内存出错）后的处理请求</li><li>中单（Hardware Interrupt）：来自硬件设备的处理请求</li></ul><p>它们的相同之处是，采用的处理方式大致相同。无论发生异常、中断、还是系统调用，都需要由硬件保存现场和中断号，转到内核态，进入中断向量表，查找对应的设备驱动程序地址（异常）、异常服务例程地址（异常），或找到系统调用表，并在其中查找对应的系统调用实现的起始地址。处理完毕之后，在进行现场切换，会到用户态继续执行程序（如果可能继续的话）。<br><img src="https://shinhwa-1258620884.cos.ap-beijing.myqcloud.com/image/1548258144244.png" alt><br>它们的区别如下表：</p><table><thead><tr><th></th><th>源头</th><th>响应方式</th><th>处理机制</th></tr></thead><tbody><tr><td>中断</td><td>外设</td><td>异步</td><td>持续，对用户应用程序是透明的</td></tr><tr><td>异常</td><td>应用程序或内核意想不到的行为</td><td>同步</td><td>杀死或重新执行意想不到的应用程序指令</td></tr><tr><td>系统调用</td><td>应用程序请求操作提供服务</td><td>异步或同步</td><td>等待和持续</td></tr></tbody></table><p>这三者的处理有时可以嵌套，有时不可以。</p><p>相比于用户态的函数调用，中断和异常的开销是比较大的，因为他们需要进行：</p><ul><li>特权级的切换</li><li>建立内核堆栈</li><li>验证参数的合法性（防止对内核的恶意攻击）</li><li>内核态需要映射到用户态的地址空间（因为需要访问用户程序的一些内容），因此㤇更新页面映射权限</li><li>内核态也拥有独立的地址空间，因此 TLB 会失效</li></ul><p><strong>中断的具体处理机制</strong></p><p>中断处理的过程需要软件和硬件的配合（虽然系统调用和异常也是。。。）</p><p>硬件处理内容包括：</p><ul><li>在 CPU 初始化时设置中断使能表示</li><li>依据内部或者外部事件设置中断标志</li><li>依据中断向量调用对应的中断服务例程</li></ul><p>软件处理内容包括：</p><ul><li>现场保存（编译器）</li><li>终端服务处理（服务例程）</li><li>清楚中断标记（服务例程）（系统调用只占用一个中断向量，另有系统调用表）</li><li>现场恢复（编译器）</li></ul><p><strong>系统调用</strong></p><p>特点</p><ul><li>系统调用时操作系统服务的编程接口</li><li>通常由高级语言编写（ C 或 C ++）</li><li>程序访问系统调用通常是高层次的 API 接口（比如封装到标准 C 库一）而不是直接进行系统调用</li><li>3中最常用的应用程序编程接口（API):<ul><li>Win32 API：Windows</li><li>POSIX API：UNIX、LINUX、Mac OS X</li><li>Java API：用于JAVA虚拟机（JVM），是对实际系统调用的进一步抽象</li></ul></li></ul><p><strong>系统调用的实现</strong></p><ul><li>每个系统调用对应一个系统调用号<ul><li>系统调用接口根据系统调用号来维护表的索引</li></ul></li><li>系统调用接口调用内核态中的系统调用功能实现，并返回系统调用的状态和结果</li><li>用户不需要系统调用的实现<ul><li>需要设置调用参数和获取返回结果</li><li>操作系统接口的细节大部分都隐藏在应用编程接口后</li></ul></li><li>通过运行程序支持的库来管理</li></ul><p>注意，系统调用时，<strong>堆栈需要切换</strong>（内核和用户程序使用的是不同的堆栈），<strong>特权级需要进行切换</strong></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>BIOS从磁盘读入的第一个扇区是是什么内容？为什么没有直接读入操作系统内核映像？</strong></p><p>BIOS完成硬件初始化和自检后，会根据CMOS中设置的启动顺序启动相应的设备，这里假定按顺序系统要启动硬盘。但此时，文件系统并没有建立，BIOS也不知道硬盘里存放的是什么，所以BIOS是无法直接启动操作系统。另外一个硬盘可以有多个分区，每个分区都有可能包括一个不同的操作系统，BIOS也无从判断应该从哪个分区启动，所以对待硬盘，所有的BIOS都是读取硬盘的0磁头、0柱面、1扇区的内容，然后把控制权交给这里面的MBR (Main Boot Record）。</p><p>我认为上述答案并不十分确切。比如，在uCore中，虽然BIOS没有建立文件系统，bootloader也没有建立文件系统啊。但是，加载操作系统是个很复杂的过程：就比如uCore，我们需要完成对ELF文件格式的解析和文件本身的读入。BIOS工作在实模式，本身访存范围只有1MB（能使用的数据只有0 ~ 0x7c00的范围），而且代码长度被限制在64KB。为了将OS读入到高地址的内存中，需要BIOS进行模式的切换。但是，如果BIOS进行了实模式到保护模式的切换，就不能实现向后兼容了。而且不同的OS的文件格式和处理方法也有差异，这会导致BIOS十分复杂。因此，让OS提供自己的启动程序是最好的选择。</p><hr><p><strong>比较UEFI和BIOS的区别。</strong></p><p>统一可扩展固件接口 (Unified Extensible Firmware Interface, UEFI) 是一种个人电脑系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。</p><p>UEFI启动对比BIOS启动的优势有三点：</p><ul><li>安全性更强：UEFI启动需要一个独立的分区，它将系统启动文件和操作系统本身隔离，可以更好的保护系统的启动；</li><li>启动配置更灵活：EFI启动和GRUB启动类似，在启动的时候可以调用EFIShell，在此可以加载指定硬件驱动，选择启动文件。比如默认启动失败，在EFIShell加载U盘上的启动文件继续启动系统；</li><li>支持容量更大：传统的BIOS启动由于MBR的限制，默认是无法引导超过2TB以上的硬盘的。随着硬盘价格的不断走低，2TB以上的硬盘会逐渐普及，因此UEFI启动也是今后主流的启动方式。</li></ul><hr><p><strong>分区引导扇区的结束标志是什么？</strong></p><p><code>0X55AA</code>。当然，上面也说到了，BIOS除此之外还会检查别的内容。</p><hr><p><strong>在UEFI中的可信启动有什么作用？</strong></p><p>通过启动前的数字签名检查来保证启动介质的安全性。</p><hr><p><strong>什么是中断、异常和系统调用？</strong></p><ul><li>中断：外部意外的响应；</li><li>异常：指令执行意外的响应；</li><li>系统调用：系统调用指令的响应。</li></ul><p>这个回答真是十分简洁明了。</p><hr><p><strong>中断、异常和系统调用的处理流程有什么异同？</strong></p><ul><li>相同点：都会进入异常服务例程，切换为内核态。</li><li>不同点：<ul><li>源头不同，中断源是外部设备，异常和系统调用源是应用程序；</li><li>响应方式不同，中断是异步的，异常是同步的，系统调用异步和同步都可以。</li><li>处理机制不同，中断对用户程序是透明的，异常会重新执行用户指令或杀死用户进程，系统调用一般是用户程序调用的</li></ul></li></ul><hr><p><strong>系统调用与函数调用的区别是什么？</strong></p><ul><li>汇编指令的区别<ul><li>系统调用：使用INT和IRET指令</li><li>函数调用：使用CALL和RET指令</li></ul></li><li>安全性的区别<ul><li>系统调用有堆栈和特权级的转换过程，函数调用没有这样的过程，系统调用相对更为安全</li></ul></li><li>性能的区别<ul><li>时间角度：系统调用比函数调用要做更多和特权级切换的工作，所以需要更多的时间开销</li><li>空间角度：在一些情况下，如果函数调用采用静态编译，往往需要大量的空间开销，此时系统调用更具有优势</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统启动过程&lt;ul&gt;
&lt;li&gt;BIOS 的原理&lt;/li&gt;
&lt;li&gt;BIOS 的一些具体工作&lt;/li&gt;
&lt;li&gt;系统启动规范&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断，异常和系统调用&lt;ul&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;li&gt;系统调用
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 2 - 操作系统实验环境</title>
    <link href="http://yoursite.com/2018/11/27/os-lecture-2-summary/"/>
    <id>http://yoursite.com/2018/11/27/os-lecture-2-summary/</id>
    <published>2018-11-26T16:03:51.000Z</published>
    <updated>2019-03-26T09:53:54.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><ul><li>实验内容的详细介绍</li><li>X86-32硬件的介绍</li><li>uCore 的部分编程技巧和数据结构</li><li>如何使用工具编写和调试实验<a id="more"></a>实验主要是使用 C 语言实现的，目前还没有认真动手操作，只是大概了解一下思路。</li></ul><h3 id="实验具体内容"><a href="#实验具体内容" class="headerlink" title="实验具体内容"></a>实验具体内容</h3><p>略。。。</p><h3 id="X86-32硬件简单介绍"><a href="#X86-32硬件简单介绍" class="headerlink" title="X86-32硬件简单介绍"></a>X86-32硬件简单介绍</h3><ul><li>运行模式<ul><li>80386 共有四中运行模式，我们只用到了其中两种</li><li>实模式：加电后的默认模式，在BootLoader中就会切换为保护模式</li><li>保护模式：一般的模式</li></ul></li><li>寻址方法<ul><li>逻辑地址：由16位的段选择子和32位的偏移量组成，是应用程序直接使用的地址空间（大概就是程序运行时访问的地址）</li><li>线性地址：由逻辑地址的偏移量 + 段基址得到，是虚存管理下每个运行的应用程序能访问的地址空间</li><li>物理地址：处理器提交到总线上用于访问计算机系统中内存和外设的最终地址。如果未开启页机制，则物理地址 = 线性地址；否则通过页表和线性地址可得到物理地址</li></ul></li><li>寄存器<ul><li>通用寄存器<ul><li>EAX : 累加器</li><li>EBX : 基址寄存器</li><li>ECX : 计数器</li><li>EDX : 数据寄存器</li><li>ESI : 原地址指针寄存器</li><li>EDI : 目的地址指针寄存器</li><li>EBP : 基址指针寄存器</li><li>ESP : 堆栈指针寄存器</li></ul></li><li>段寄存器<ul><li>CS : 代码段 ( Code Segment)</li><li>DS : 数据段（Data Segment）</li><li>ES : 附加数据段（Extra Segment）</li><li>SS : 堆栈段（Stack Segment</li><li>FS : 附加段</li><li>GS : 附加段</li></ul></li><li>指令寄存器 EIP : 指令的段内偏移地址</li><li>标志寄存器 EFLAGS : <ul><li>TF : 开启单步调试</li><li>IF : 开启硬件中断</li><li>IOPL : I/O特权级，CPL &lt;= IOPL 时才能进行 I/O 操作 </li></ul></li></ul></li></ul><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><p>略。。。</p><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>你理解的对于类似ucore这样需要进程/虚存/文件系统的操作系统，在硬件设计上至少需要有哪些直接的支持？至少应该提供哪些功能的特权指令？</strong></p><p>进程的切换需要硬件支持时钟中断；虚存管理需要地址映射机制，从而需要MMU等硬件；对于文件系统，需要硬件有稳定的存储介质来保证操作系统的持久性。对应的，应当提供中断使能，触发软中断等中断相关的，设置内存寻址模式，设置页表等内存管理相关的，执行 I/O 操作等文件系统相关的特权指令。</p><p>对于现代操作系统（每个进程占一个时间片）时钟中断是非常重要的。存储介质当然也是非常重要的。当然，事实上，MMU 没有也行，可以用用户态函数库来实现地址转换，但这样可能就保证不了安全性了。</p><p>Intel 手册第 3 卷 2.8 j节 “System Instruction Summary” 中给出了一个系统指令列表。 “系统指令完成的是系统级的功能，包括加载系统寄存器、管理 Cache、管理终端和设置调试寄存器。其中的大部分指令都必须由操作系统或特权级为 0 的进程执行；另一部分可以由任何特权级的进程执行。”</p><p><strong>你理解的x86的实模式和保护模式有什么区别？物理地址、线性地址、逻辑地址的含义分别是什么？</strong></p><p>保护模式和实模式的根本区别是进程内存是否受保护。（作者的意见是，实模式既是一个历史包袱，又有一定的实际用途。在实模式下，BIOS 自检和加载 BootLoader 的程序可以尽可能简单，因为不需要建立复杂的段映射。但是段机制必须开启这一点也是历史包袱。总之，BootLoader 一开始就开了 A20 ，设置了GDT然后长跳转切换到保护模式了。）实模式将整个内存看成分段的区域，程序代码和数据位于不同的区域，系统程序和用户程序没有区别对待，而且没一个指针都是指向“实在”的物理地址。这样一来，用户程序的一个指针如果指向了系统程序区域或其他用户程序区域，并改变了值，那么对于这个别修改的系统程序或用户程序，其后果可能是灾难性的。为了克服这种低劣的内存管理模式，处理器厂商开发出保护模式。这样，物理内存不能直接被程序访问，程序内部的地址（虚拟地址）要由操作系统转化为物理地址去访问，程序对此一无所知。</p><ul><li>物理地址：是处理器提交到总线上用于访问计算机系统中的内存和外设的最终地址。</li><li>逻辑地址：在有地址变换功能的计算机中，访问指令给出的地址叫逻辑地址。（一般的定义是段选择子+段内偏移量是逻辑地址。大概）</li><li>线性地址：线性地址是逻辑地址和物理地址变换之间的中间层，是处理器通过段（Segment）机制控制下形成的地址空间</li><li>虚拟地址：对这个名称的定义总是模糊不清。在这门课中，似乎虚拟地址就是程序内存的地址。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实验内容的详细介绍&lt;/li&gt;
&lt;li&gt;X86-32硬件的介绍&lt;/li&gt;
&lt;li&gt;uCore 的部分编程技巧和数据结构&lt;/li&gt;
&lt;li&gt;如何使用工具编写和调试实验
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS Summary 1 - 操作系统概述</title>
    <link href="http://yoursite.com/2018/11/21/os-lecture-1-summary/"/>
    <id>http://yoursite.com/2018/11/21/os-lecture-1-summary/</id>
    <published>2018-11-20T16:03:51.000Z</published>
    <updated>2019-03-26T09:43:05.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><ul><li>什么是操作系统</li><li>操作系统的演变</li><li>操作系统结果的分类<a id="more"></a></li></ul><h3 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h3><p>操作系统可以是：</p><ul><li>一个控制程序</li><li>一个资源管理器</li><li>一套标准库</li></ul><p>操作系统通常有内核、命令行和 GUI 组成。我们研究的主要是内核。可以分成以下4个层次 ：</p><ul><li>应用程序</li><li>命令行程序、编译器、解释器、系统库</li><li>内核<ul><li>内核向上提供系统调用接口</li><li>同时调用下层提供的硬件抽象</li></ul></li><li>硬件设备</li></ul><p>操作系统内核的特征：</p><ul><li>并发：OS 需要管理和调度多个同时运行的程序</li><li>共享：对资源的互斥共享</li><li>虚拟：对 CUP 和内存资源的虚拟化</li><li>异步：程序的运行时时常会停止的，OS 需要保证程序展厅之后状态不变</li></ul><h3 id="操作系统的演变"><a href="#操作系统的演变" class="headerlink" title="操作系统的演变"></a>操作系统的演变</h3><ul><li>单用户系统：1945 - 1955<ul><li>OS = 装载器 + 通用子程序库</li><li>存在的问题：任务完全为穿行执行，由于读卡时间过长，执行时间比例降低</li></ul></li><li>批处理系统：1955 - 1965<ul><li>每个任务在每个组件中串行执行，总体看来是并行执行的</li><li>解决了利用率的问题</li></ul></li><li>多道程序系统：1965 - 1980<ul><li>将多个程序储存在内存中，复用 CPU </li><li>在程序进行 I/O 操作室将其阻塞，切换到别的程序</li></ul></li><li>分时系统：1970 - <ul><li>定义中断当前程序，实现对CPU的复用</li></ul></li><li>个人电脑操作系统</li><li>分布式操作系统</li><li>……</li></ul><h3 id="操作系统结构的分类"><a href="#操作系统结构的分类" class="headerlink" title="操作系统结构的分类"></a>操作系统结构的分类</h3><p>操作系统的结构可以分为以下几种：</p><ul><li>简单结构：没有拆分为模块，没有很好的分离接口和功能<ul><li>应用程序可以直接访问最底层的服务，也可以使用操作系统的服务</li><li>例： MS-DOS </li></ul></li><li>分层结构：将操作系统分为几层，每层建立在底层之上<ul><li>优点：可移植性强</li><li>缺点：层次过多会导致效率降低</li><li>例：UNIX </li></ul></li><li>微内核结构：将一些内核服务移动到用户态，内核只保留进程通信和硬件支持功能<ul><li>优点：灵活，安全</li><li>缺点：性能差</li><li>例：目前的系统结构是微内核结构和分层结构的混合体</li></ul></li><li>外核结构：内核只起到资源的保护和隔离功能，操作系统原有功能由用户态操作系统库支持</li><li>虚拟机结构：操作系统和虚拟机管理器交互，虚拟机管理器负责和硬件交互</li></ul><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="选择填空题"><a href="#选择填空题" class="headerlink" title="选择填空题"></a>选择填空题</h3><hr><ul><li>当前常见的操作系统主要用<strong>C，C++，ASM编程语言</strong>编写。</li></ul><hr><ul><li>“Operating system”这个单词起源于<strong>Operator</strong>。</li></ul><p>指的是原来的系统操作员。</p><hr><ul><li>在计算机系统中，控制和管理各种资源、有效地组织多道程序运行的系统软件称作<strong>操作系统</strong>。</li></ul><p>对操作系统定义的考察。当然我觉得这个答案并不全面，加上“提供了一套标准库”（也就是系统调用）会更好。</p><hr><ul><li>允许多用户将若干个作业提交给计算机系统集中处理的操作系统称为<strong>批处理</strong>操作系统。</li></ul><p>这说明单用户系统是每个任务手动提交上去的。</p><hr><ul><li>你了解的当前世界上使用最多的32bit CPU是<strong>ARM</strong>，其上运行最多的操作系统是<strong>Android</strong>。</li></ul><p>答案如此，没有找到信源。不过知道这个也没什么意义。</p><hr><ul><li>应用程序通过<strong>系统调用</strong>接口获得操作系统的服务。</li></ul><p>系统调用是非常重要的。这是应用程序主动进入内核态的方式。</p><hr><ul><li>现代操作系统的特征包括<strong>并发性，共享性，虚拟性，异步性，持久性</strong>。</li></ul><p>特征到底应该包括哪些也是见仁见智。OSTEP中总结出的三点是虚拟，并发和持久性。异步性和共享性大概可以归入并发性。同时我也觉得持久性未必是操作系统的特点，而是存储设备的特点。当然这也可能是我的理解不够。</p><p>UPD：操作系统本身也是需要从持久性存储设备中读入的。文件系统也是OS的重要组成成分。所以我想得可能太片面了。</p><hr><ul><li>操作系统内核的架构包括<strong>宏内核，微内核，外核</strong>。</li></ul><p>这个答案和上面讲的并不相符。那么，当然应该填简单结构、分层结构、微内核结构、外核结构和虚拟机结构了。</p><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>请总结你认为操作系统应该具有的特征有什么？并对其特征进行简要阐述。</strong></p><p>操作系统应该具有的特征有：虚拟性、并发性、异步性、共享性和持久性。</p><ul><li>虚拟性：虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。在操作系统中利用了多种虚拟技术，分别用来实现虚拟处理器、虚拟内存和虚拟外部设备。</li><li>并发性：并发是指两个或多个事件在同一时间间隔内发生，在多道程序环境下，一段时间内宏观上有多个程序在同时执行，而在同一时刻，单处理器环境下实际上只有一个程序在执行，故微观上这些程序还是在分时的交替进行。操作系统的并发是通过分时得以实现的。操作系统的并发性是指计算机系统中同时存在多个运行着的程序，因此它具有处理和调度多个程序同时执行的能力。</li><li>异步性：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。异步性使得操作系统运行在一种随机的环境下，可能导致进程产生于时间有关的错误。但是只要运行环境相同，操作系统必须保证多次运行进程，都获得相同的结果。</li><li>共享性：系统中的资源可供内存中多个并发执行的进程共同使用。（事实上，只能做到互斥共享，或者说同时。）</li><li>持久性：通过实现文件系统，操作系统可以将程序以及数据存储在磁盘等存储介质中。 详细解释可以参考操作系统的特征。</li></ul><hr><p><strong>为什么现在的操作系统基本上用C语言来实现？为什么没有人用python，java来实现操作系统？</strong></p><p>C语言是编译型语言，有良好的性能，能够直接嵌入汇编，可以方便地操作硬件；Python，Java无法保证性能，不能直接操作硬件。</p><p>不过，仍然是有人用这些语言来编写操作系统的，比如：</p><ul><li>用Java实现的操作系统：<a href="https://en.wikipedia.org/wiki/JavaOS" target="_blank" rel="noopener">JavaOS</a></li><li>用Python实现的操作系统：<a href="https://github.com/tornewuff/pycorn" target="_blank" rel="noopener">pycorn</a>，<a href="https://github.com/wfxpanisa/pythonix" target="_blank" rel="noopener">pythonix</a></li><li>用Rust实现的操作系统：<a href="https://www.redox-os.org/" target="_blank" rel="noopener">Redox</a></li></ul><p>参考：</p><p><a href="https://github.com/chyyuu/os_course_info" target="_blank" rel="noopener">https://github.com/chyyuu/os_course_info</a></p><p><a href="https://zhanghuimeng.github.io/" target="_blank" rel="noopener">https://zhanghuimeng.github.io/</a></p><p><a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X+sp/about" target="_blank" rel="noopener">http://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X+sp/about</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么是操作系统&lt;/li&gt;
&lt;li&gt;操作系统的演变&lt;/li&gt;
&lt;li&gt;操作系统结果的分类
    
    </summary>
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
</feed>
