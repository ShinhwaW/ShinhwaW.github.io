<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shinhwa&#39;s Site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-25T16:28:31.264Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shinhwa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>os-lecture-1-summary</title>
    <link href="http://yoursite.com/2019/03/26/os-lecture-1-summary/"/>
    <id>http://yoursite.com/2019/03/26/os-lecture-1-summary/</id>
    <published>2019-03-25T16:03:51.000Z</published>
    <updated>2019-03-25T16:28:31.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><h2 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h2><ul><li>什么是操作系统</li><li>操作系统的演变</li><li>操作系统结果的分类<a id="more"></a><h3 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h3></li></ul><p>操作系统可以是：</p><ul><li>一个控制程序</li><li>一个资源管理器</li><li>一套标准库</li></ul><p>操作系统通常有内核、命令行和 GUI 组成。我们研究的主要是内核。可以分成以下4个层次 ：</p><ul><li>应用程序</li><li>命令行程序、编译器、解释器、系统库</li><li>内核<ul><li>内核向上提供系统调用接口</li><li>同时调用下层提供的硬件抽象</li></ul></li><li>硬件设备</li></ul><p>操作系统内核的特征：</p><ul><li>并发：OS 需要管理和调度多个同时运行的程序</li><li>共享：对资源的互斥共享</li><li>虚拟：对 CUP 和内存资源的虚拟化</li><li>异步：程序的运行时时常会停止的，OS 需要保证程序展厅之后状态不变</li></ul><h3 id="操作系统的演变"><a href="#操作系统的演变" class="headerlink" title="操作系统的演变"></a>操作系统的演变</h3><ul><li>单用户系统：1945 - 1955<ul><li>OS = 装载器 + 通用子程序库</li><li>存在的问题：任务完全为穿行执行，由于读卡时间过长，执行时间比例降低</li></ul></li><li>批处理系统：1955 - 1965<ul><li>每个任务在每个组件中串行执行，总体看来是并行执行的</li><li>解决了利用率的问题</li></ul></li><li>多道程序系统：1965 - 1980<ul><li>将多个程序储存在内存中，复用 CPU </li><li>在程序进行 I/O 操作室将其阻塞，切换到别的程序</li></ul></li><li>分时系统：1970 - <ul><li>定义中断当前程序，实现对CPU的复用</li></ul></li><li>个人电脑操作系统</li><li>分布式操作系统</li><li>……</li></ul><h3 id="操作系统结构的分类"><a href="#操作系统结构的分类" class="headerlink" title="操作系统结构的分类"></a>操作系统结构的分类</h3><p>操作系统的结构可以分为以下几种：</p><ul><li>简单结构：没有拆分为模块，没有很好的分离接口和功能<ul><li>应用程序可以直接访问最底层的服务，也可以使用操作系统的服务</li><li>例： MS-DOS </li></ul></li><li>分层结构：将操作系统分为几层，每层建立在底层之上<ul><li>优点：可移植性强</li><li>缺点：层次过多会导致效率降低</li><li>例：UNIX </li></ul></li><li>微内核结构：将一些内核服务移动到用户态，内核只保留进程通信和硬件支持功能<ul><li>优点：灵活，安全</li><li>缺点：性能差</li><li>例：目前的系统结构是微内核结构和分层结构的混合体</li></ul></li><li>外核结构：内核只起到资源的保护和隔离功能，操作系统原有功能由用户态操作系统库支持</li><li>虚拟机结构：操作系统和虚拟机管理器交互，虚拟机管理器负责和硬件交互</li></ul><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="选择填空题"><a href="#选择填空题" class="headerlink" title="选择填空题"></a>选择填空题</h3><hr><ul><li>当前常见的操作系统主要用<strong>C，C++，ASM编程语言</strong>编写。</li></ul><hr><ul><li>“Operating system”这个单词起源于<strong>Operator</strong>。</li></ul><p>指的是原来的系统操作员。</p><hr><ul><li>在计算机系统中，控制和管理各种资源、有效地组织多道程序运行的系统软件称作<strong>操作系统</strong>。</li></ul><p>对操作系统定义的考察。当然我觉得这个答案并不全面，加上“提供了一套标准库”（也就是系统调用）会更好。</p><hr><ul><li>允许多用户将若干个作业提交给计算机系统集中处理的操作系统称为<strong>批处理</strong>操作系统。</li></ul><p>这说明单用户系统是每个任务手动提交上去的。</p><hr><ul><li>你了解的当前世界上使用最多的32bit CPU是<strong>ARM</strong>，其上运行最多的操作系统是<strong>Android</strong>。</li></ul><p>答案如此，没有找到信源。不过知道这个也没什么意义。</p><hr><ul><li>应用程序通过<strong>系统调用</strong>接口获得操作系统的服务。</li></ul><p>系统调用是非常重要的。这是应用程序主动进入内核态的方式。</p><hr><ul><li>现代操作系统的特征包括<strong>并发性，共享性，虚拟性，异步性，持久性</strong>。</li></ul><p>特征到底应该包括哪些也是见仁见智。OSTEP中总结出的三点是虚拟，并发和持久性。异步性和共享性大概可以归入并发性。同时我也觉得持久性未必是操作系统的特点，而是存储设备的特点。当然这也可能是我的理解不够。</p><p>UPD：操作系统本身也是需要从持久性存储设备中读入的。文件系统也是OS的重要组成成分。所以我想得可能太片面了。</p><hr><ul><li>操作系统内核的架构包括<strong>宏内核，微内核，外核</strong>。</li></ul><p>这个答案和上面讲的并不相符。那么，当然应该填简单结构、分层结构、微内核结构、外核结构和虚拟机结构了。</p><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p><strong>请总结你认为操作系统应该具有的特征有什么？并对其特征进行简要阐述。</strong></p><p>操作系统应该具有的特征有：虚拟性、并发性、异步性、共享性和持久性。</p><ul><li>虚拟性：虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。在操作系统中利用了多种虚拟技术，分别用来实现虚拟处理器、虚拟内存和虚拟外部设备。</li><li>并发性：并发是指两个或多个事件在同一时间间隔内发生，在多道程序环境下，一段时间内宏观上有多个程序在同时执行，而在同一时刻，单处理器环境下实际上只有一个程序在执行，故微观上这些程序还是在分时的交替进行。操作系统的并发是通过分时得以实现的。操作系统的并发性是指计算机系统中同时存在多个运行着的程序，因此它具有处理和调度多个程序同时执行的能力。</li><li>异步性：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。异步性使得操作系统运行在一种随机的环境下，可能导致进程产生于时间有关的错误。但是只要运行环境相同，操作系统必须保证多次运行进程，都获得相同的结果。</li><li>共享性：系统中的资源可供内存中多个并发执行的进程共同使用。（事实上，只能做到互斥共享，或者说同时。）</li><li>持久性：通过实现文件系统，操作系统可以将程序以及数据存储在磁盘等存储介质中。 详细解释可以参考操作系统的特征。</li></ul><hr><p><strong>为什么现在的操作系统基本上用C语言来实现？为什么没有人用python，java来实现操作系统？</strong></p><p>C语言是编译型语言，有良好的性能，能够直接嵌入汇编，可以方便地操作硬件；Python，Java无法保证性能，不能直接操作硬件。</p><p>不过，仍然是有人用这些语言来编写操作系统的，比如：</p><ul><li>用Java实现的操作系统：<a href="https://en.wikipedia.org/wiki/JavaOS" target="_blank" rel="noopener">JavaOS</a></li><li>用Python实现的操作系统：<a href="https://github.com/tornewuff/pycorn" target="_blank" rel="noopener">pycorn</a>，<a href="https://github.com/wfxpanisa/pythonix" target="_blank" rel="noopener">pythonix</a></li><li>用Rust实现的操作系统：<a href="https://www.redox-os.org/" target="_blank" rel="noopener">Redox</a></li></ul><p>参考：</p><p><a href="https://github.com/chyyuu/os_course_info" target="_blank" rel="noopener">https://github.com/chyyuu/os_course_info</a></p><p><a href="https://zhanghuimeng.github.io/" target="_blank" rel="noopener">https://zhanghuimeng.github.io/</a></p><p><a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X+sp/about" target="_blank" rel="noopener">http://www.xuetangx.com/courses/course-v1:TsinghuaX+30240243X+sp/about</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作系统概述&quot;&gt;&lt;a href=&quot;#操作系统概述&quot; class=&quot;headerlink&quot; title=&quot;操作系统概述&quot;&gt;&lt;/a&gt;操作系统概述&lt;/h1&gt;&lt;h2 id=&quot;内容概述&quot;&gt;&lt;a href=&quot;#内容概述&quot; class=&quot;headerlink&quot; title=&quot;内容概述&quot;&gt;&lt;/a&gt;内容概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是操作系统&lt;/li&gt;
&lt;li&gt;操作系统的演变&lt;/li&gt;
&lt;li&gt;操作系统结果的分类
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/24/hello-world/"/>
    <id>http://yoursite.com/2019/03/24/hello-world/</id>
    <published>2019-03-23T16:31:31.744Z</published>
    <updated>2019-03-25T16:26:42.363Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
